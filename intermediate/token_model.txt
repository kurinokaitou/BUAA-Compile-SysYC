3 CONSTRW const
3 INTRW int
3 IDENT c1
3 ASSIGN =
3 INTCON 1
3 SEMICO ;
4 CONSTRW const
4 INTRW int
4 IDENT cc1
4 ASSIGN =
4 INTCON 1
4 COMMA ,
4 IDENT cc2
4 ASSIGN =
4 INTCON 1
4 SEMICO ;
5 CONSTRW const
5 INTRW int
5 IDENT ccc1
5 ASSIGN =
5 INTCON 1
5 COMMA ,
5 IDENT ccc2
5 ASSIGN =
5 INTCON 1
5 COMMA ,
5 IDENT ccc3
5 ASSIGN =
5 INTCON 1
5 SEMICO ;
6 CONSTRW const
6 INTRW int
6 IDENT ca1
6 LBRACK [
6 INTCON 2
6 RBRACK ]
6 ASSIGN =
6 LBRACE {
6 INTCON 1
6 COMMA ,
6 INTCON 2
6 RBRACE }
6 SEMICO ;
7 CONSTRW const
7 INTRW int
7 IDENT cca1
7 LBRACK [
7 INTCON 2
7 RBRACK ]
7 ASSIGN =
7 LBRACE {
7 INTCON 1
7 COMMA ,
7 INTCON 2
7 RBRACE }
7 COMMA ,
7 IDENT cca2
7 LBRACK [
7 INTCON 2
7 RBRACK ]
7 ASSIGN =
7 LBRACE {
7 INTCON 1
7 COMMA ,
7 INTCON 2
7 RBRACE }
7 SEMICO ;
8 CONSTRW const
8 INTRW int
8 IDENT caa1
8 LBRACK [
8 INTCON 2
8 RBRACK ]
8 LBRACK [
8 INTCON 2
8 RBRACK ]
8 ASSIGN =
8 LBRACE {
8 LBRACE {
8 INTCON 1
8 COMMA ,
8 INTCON 2
8 RBRACE }
8 COMMA ,
8 LBRACE {
8 INTCON 3
8 COMMA ,
8 INTCON 4
8 RBRACE }
8 RBRACE }
8 SEMICO ;
9 CONSTRW const
9 INTRW int
9 IDENT ccaa1
9 LBRACK [
9 INTCON 2
9 RBRACK ]
9 LBRACK [
9 INTCON 2
9 RBRACK ]
9 ASSIGN =
9 LBRACE {
9 LBRACE {
9 INTCON 1
9 COMMA ,
9 INTCON 2
9 RBRACE }
9 COMMA ,
9 LBRACE {
9 INTCON 3
9 COMMA ,
9 INTCON 4
9 RBRACE }
9 RBRACE }
9 COMMA ,
9 IDENT ccaa2
9 LBRACK [
9 INTCON 2
9 RBRACK ]
9 LBRACK [
9 INTCON 2
9 RBRACK ]
9 ASSIGN =
9 LBRACE {
9 LBRACE {
9 INTCON 1
9 COMMA ,
9 INTCON 2
9 RBRACE }
9 COMMA ,
9 LBRACE {
9 INTCON 3
9 COMMA ,
9 INTCON 4
9 RBRACE }
9 RBRACE }
9 SEMICO ;
11 INTRW int
11 IDENT v1
11 ASSIGN =
11 INTCON 1
11 SEMICO ;
12 INTRW int
12 IDENT vc1
12 ASSIGN =
12 INTCON 1
12 COMMA ,
12 IDENT vc2
12 ASSIGN =
12 INTCON 1
12 SEMICO ;
13 INTRW int
13 IDENT vcc1
13 ASSIGN =
13 INTCON 1
13 COMMA ,
13 IDENT vcc2
13 ASSIGN =
13 INTCON 1
13 COMMA ,
13 IDENT vcc3
13 ASSIGN =
13 INTCON 1
13 SEMICO ;
14 INTRW int
14 IDENT va1
14 LBRACK [
14 INTCON 2
14 RBRACK ]
14 ASSIGN =
14 LBRACE {
14 INTCON 1
14 COMMA ,
14 INTCON 2
14 RBRACE }
14 SEMICO ;
15 INTRW int
15 IDENT vca1
15 LBRACK [
15 INTCON 2
15 RBRACK ]
15 ASSIGN =
15 LBRACE {
15 INTCON 1
15 COMMA ,
15 INTCON 2
15 RBRACE }
15 COMMA ,
15 IDENT vca2
15 LBRACK [
15 INTCON 2
15 RBRACK ]
15 ASSIGN =
15 LBRACE {
15 INTCON 1
15 COMMA ,
15 INTCON 2
15 RBRACE }
15 SEMICO ;
16 INTRW int
16 IDENT vaa1
16 LBRACK [
16 INTCON 2
16 RBRACK ]
16 LBRACK [
16 INTCON 2
16 RBRACK ]
16 ASSIGN =
16 LBRACE {
16 LBRACE {
16 INTCON 1
16 COMMA ,
16 INTCON 2
16 RBRACE }
16 COMMA ,
16 LBRACE {
16 INTCON 3
16 COMMA ,
16 INTCON 4
16 RBRACE }
16 RBRACE }
16 SEMICO ;
17 INTRW int
17 IDENT vcaa1
17 LBRACK [
17 INTCON 2
17 RBRACK ]
17 LBRACK [
17 INTCON 2
17 RBRACK ]
17 ASSIGN =
17 LBRACE {
17 LBRACE {
17 INTCON 1
17 COMMA ,
17 INTCON 2
17 RBRACE }
17 COMMA ,
17 LBRACE {
17 INTCON 3
17 COMMA ,
17 INTCON 4
17 RBRACE }
17 RBRACE }
17 COMMA ,
17 IDENT vcaa2
17 LBRACK [
17 INTCON 2
17 RBRACK ]
17 LBRACK [
17 INTCON 2
17 RBRACK ]
17 ASSIGN =
17 LBRACE {
17 LBRACE {
17 INTCON 1
17 COMMA ,
17 INTCON 2
17 RBRACE }
17 COMMA ,
17 LBRACE {
17 INTCON 3
17 COMMA ,
17 INTCON 4
17 RBRACE }
17 RBRACE }
17 SEMICO ;
18 INTRW int
18 IDENT g
18 ASSIGN =
18 INTCON 0
18 SEMICO ;
19 INTRW int
19 IDENT without_para
19 LPARENT (
19 RPARENT )
19 LBRACE {
20 RETURNRW return
20 INTCON 5
20 SEMICO ;
21 RBRACE }
23 INTRW int
23 IDENT with_para_1
23 LPARENT (
23 INTRW int
23 IDENT p
23 RPARENT )
23 LBRACE {
24 RETURNRW return
24 IDENT p
24 MULT *
24 IDENT p
24 SEMICO ;
25 RBRACE }
27 INTRW int
27 IDENT with_para_2
27 LPARENT (
27 INTRW int
27 IDENT p1
27 COMMA ,
27 INTRW int
27 IDENT p2
27 RPARENT )
27 LBRACE {
28 RETURNRW return
28 IDENT p1
28 MULT *
28 IDENT p2
28 SEMICO ;
29 RBRACE }
31 INTRW int
31 IDENT with_array_para_1
31 LPARENT (
31 INTRW int
31 IDENT a
31 LBRACK [
31 RBRACK ]
31 RPARENT )
31 LBRACE {
32 RETURNRW return
32 IDENT a
32 LBRACK [
32 INTCON 0
32 RBRACK ]
32 MULT *
32 IDENT a
32 LBRACK [
32 INTCON 0
32 RBRACK ]
32 SEMICO ;
33 RBRACE }
35 INTRW int
35 IDENT with_array_para_2
35 LPARENT (
35 INTRW int
35 IDENT a
35 LBRACK [
35 RBRACK ]
35 COMMA ,
35 INTRW int
35 IDENT b
35 LBRACK [
35 RBRACK ]
35 RPARENT )
35 LBRACE {
36 RETURNRW return
36 IDENT a
36 LBRACK [
36 INTCON 0
36 RBRACK ]
36 MULT *
36 IDENT b
36 LBRACK [
36 INTCON 0
36 RBRACK ]
36 SEMICO ;
37 RBRACE }
39 INTRW int
39 IDENT with_double_array_para_1
39 LPARENT (
39 INTRW int
39 IDENT a
39 LBRACK [
39 RBRACK ]
39 LBRACK [
39 INTCON 2
39 RBRACK ]
39 RPARENT )
39 LBRACE {
40 RETURNRW return
40 IDENT a
40 LBRACK [
40 INTCON 0
40 RBRACK ]
40 LBRACK [
40 INTCON 0
40 RBRACK ]
40 MULT *
40 IDENT a
40 LBRACK [
40 INTCON 0
40 RBRACK ]
40 LBRACK [
40 INTCON 0
40 RBRACK ]
40 SEMICO ;
41 RBRACE }
43 INTRW int
43 IDENT with_double_array_para_2
43 LPARENT (
43 INTRW int
43 IDENT a
43 LBRACK [
43 RBRACK ]
43 LBRACK [
43 INTCON 2
43 RBRACK ]
43 COMMA ,
43 INTRW int
43 IDENT b
43 LBRACK [
43 RBRACK ]
43 LBRACK [
43 INTCON 2
43 RBRACK ]
43 RPARENT )
43 LBRACE {
44 RETURNRW return
44 IDENT a
44 LBRACK [
44 INTCON 0
44 RBRACK ]
44 LBRACK [
44 INTCON 0
44 RBRACK ]
44 MULT *
44 IDENT b
44 LBRACK [
44 INTCON 0
44 RBRACK ]
44 LBRACK [
44 INTCON 0
44 RBRACK ]
44 SEMICO ;
45 RBRACE }
47 INTRW int
47 IDENT without_para_void
47 LPARENT (
47 RPARENT )
47 LBRACE {
48 RETURNRW return
48 INTCON 1
48 SEMICO ;
49 RBRACE }
51 VOIDRW void
51 IDENT with_para_1_void
51 LPARENT (
51 INTRW int
51 IDENT p
51 RPARENT )
51 LBRACE {
52 INTRW int
52 IDENT p1
52 ASSIGN =
52 IDENT p
52 MULT *
52 IDENT p
52 SEMICO ;
53 RBRACE }
55 VOIDRW void
55 IDENT with_para_2_void
55 LPARENT (
55 INTRW int
55 IDENT p1
55 COMMA ,
55 INTRW int
55 IDENT p2
55 RPARENT )
55 LBRACE {
56 INTRW int
56 IDENT p
56 ASSIGN =
56 IDENT p1
56 MULT *
56 IDENT p2
56 SEMICO ;
57 RBRACE }
59 VOIDRW void
59 IDENT with_array_para_1_void
59 LPARENT (
59 INTRW int
59 IDENT a
59 LBRACK [
59 RBRACK ]
59 RPARENT )
59 LBRACE {
60 INTRW int
60 IDENT p
60 ASSIGN =
60 IDENT a
60 LBRACK [
60 INTCON 0
60 RBRACK ]
60 MULT *
60 IDENT a
60 LBRACK [
60 INTCON 0
60 RBRACK ]
60 SEMICO ;
61 RBRACE }
63 VOIDRW void
63 IDENT with_array_para_2_void
63 LPARENT (
63 INTRW int
63 IDENT a
63 LBRACK [
63 RBRACK ]
63 COMMA ,
63 INTRW int
63 IDENT b
63 LBRACK [
63 RBRACK ]
63 RPARENT )
63 LBRACE {
64 INTRW int
64 IDENT p
64 ASSIGN =
64 IDENT a
64 LBRACK [
64 INTCON 0
64 RBRACK ]
64 MULT *
64 IDENT b
64 LBRACK [
64 INTCON 0
64 RBRACK ]
64 SEMICO ;
65 RBRACE }
67 VOIDRW void
67 IDENT with_double_array_para_1_void
67 LPARENT (
67 INTRW int
67 IDENT a
67 LBRACK [
67 RBRACK ]
67 LBRACK [
67 INTCON 10
67 RBRACK ]
67 RPARENT )
67 LBRACE {
68 INTRW int
68 IDENT p
68 ASSIGN =
68 IDENT a
68 LBRACK [
68 INTCON 0
68 RBRACK ]
68 LBRACK [
68 INTCON 0
68 RBRACK ]
68 MULT *
68 IDENT a
68 LBRACK [
68 INTCON 0
68 RBRACK ]
68 LBRACK [
68 INTCON 0
68 RBRACK ]
68 SEMICO ;
69 RBRACE }
71 VOIDRW void
71 IDENT with_double_array_para_2_void
71 LPARENT (
71 INTRW int
71 IDENT a
71 LBRACK [
71 RBRACK ]
71 LBRACK [
71 INTCON 2
71 RBRACK ]
71 COMMA ,
71 INTRW int
71 IDENT b
71 LBRACK [
71 RBRACK ]
71 LBRACK [
71 INTCON 2
71 RBRACK ]
71 RPARENT )
71 LBRACE {
72 INTRW int
72 IDENT p
72 ASSIGN =
72 IDENT a
72 LBRACK [
72 INTCON 0
72 RBRACK ]
72 LBRACK [
72 INTCON 0
72 RBRACK ]
72 MULT *
72 IDENT b
72 LBRACK [
72 INTCON 0
72 RBRACK ]
72 LBRACK [
72 INTCON 0
72 RBRACK ]
72 SEMICO ;
73 RETURNRW return
73 SEMICO ;
74 RBRACE }
76 INTRW int
76 IDENT add_g
76 LPARENT (
76 RPARENT )
76 LBRACE {
77 IDENT g
77 ASSIGN =
77 IDENT g
77 PLUS +
77 INTCON 1
77 SEMICO ;
78 RETURNRW return
78 IDENT g
78 SEMICO ;
79 RBRACE }
81 INTRW int
81 MAINRW main
81 LPARENT (
81 RPARENT )
81 LBRACE {
82 INTRW int
82 IDENT n
82 ASSIGN =
82 INTCON 0
82 COMMA ,
82 IDENT m
82 ASSIGN =
82 INTCON 0
82 SEMICO ;
83 INTRW int
83 IDENT i
83 ASSIGN =
83 INTCON 0
83 SEMICO ;
84 INTRW int
84 IDENT a
84 ASSIGN =
84 INTCON 1
84 COMMA ,
84 IDENT b
84 ASSIGN =
84 INTCON 2
84 SEMICO ;
85 INTRW int
85 IDENT value
85 ASSIGN =
85 INTCON 5
85 SEMICO ;
86 INTRW int
86 IDENT array
86 LBRACK [
86 INTCON 2
86 RBRACK ]
86 ASSIGN =
86 LBRACE {
86 INTCON 0
86 COMMA ,
86 INTCON 0
86 RBRACE }
86 SEMICO ;
87 IDENT n
87 ASSIGN =
87 GETINTRW getint
87 LPARENT (
87 RPARENT )
87 SEMICO ;
88 IDENT m
88 ASSIGN =
88 GETINTRW getint
88 LPARENT (
88 RPARENT )
88 SEMICO ;
89 PRINTFRW printf
89 LPARENT (
89 STRCON "19373700\n"
89 RPARENT )
89 SEMICO ;
90 PRINTFRW printf
90 LPARENT (
90 STRCON "%d\n"
90 COMMA ,
90 IDENT n
90 RPARENT )
90 SEMICO ;
91 IDENT n
91 ASSIGN =
91 IDENT n
91 MULT *
91 IDENT m
91 SEMICO ;
92 IDENT m
92 ASSIGN =
92 LPARENT (
92 IDENT n
92 PLUS +
92 IDENT m
92 RPARENT )
92 MULT *
92 IDENT n
92 SEMICO ;
93 LBRACE {
94 RBRACE }
95 IFRW if
95 LPARENT (
95 INTCON 0
95 RPARENT )
95 LBRACE {
96 PRINTFRW printf
96 LPARENT (
96 STRCON "false\n"
96 RPARENT )
96 SEMICO ;
97 RBRACE }
97 ELSERW else
97 LBRACE {
98 PRINTFRW printf
98 LPARENT (
98 STRCON "true\n"
98 RPARENT )
98 SEMICO ;
99 RBRACE }
101 IFRW if
101 LPARENT (
101 NOT !
101 INTCON 0
101 RPARENT )
101 LBRACE {
102 PRINTFRW printf
102 LPARENT (
102 STRCON "true\n"
102 RPARENT )
102 SEMICO ;
103 RBRACE }
103 ELSERW else
103 LBRACE {
104 PRINTFRW printf
104 LPARENT (
104 STRCON "false\n"
104 RPARENT )
104 SEMICO ;
105 RBRACE }
107 IFRW if
107 LPARENT (
107 IDENT a
107 LES <
107 IDENT b
107 RPARENT )
107 LBRACE {
108 PRINTFRW printf
108 LPARENT (
108 STRCON "a<b\n"
108 RPARENT )
108 SEMICO ;
109 RBRACE }
110 IFRW if
110 LPARENT (
110 IDENT a
110 GREAT >
110 IDENT b
110 RPARENT )
110 LBRACE {
111 PRINTFRW printf
111 LPARENT (
111 STRCON "a>b\n"
111 RPARENT )
111 SEMICO ;
112 RBRACE }
113 IFRW if
113 LPARENT (
113 IDENT a
113 LEQ <=
113 IDENT b
113 RPARENT )
113 LBRACE {
114 PRINTFRW printf
114 LPARENT (
114 STRCON "a<=b\n"
114 RPARENT )
114 SEMICO ;
115 RBRACE }
116 IFRW if
116 LPARENT (
116 IDENT a
116 GEQ >=
116 IDENT b
116 RPARENT )
116 LBRACE {
117 PRINTFRW printf
117 LPARENT (
117 STRCON "a>=b\n"
117 RPARENT )
117 SEMICO ;
118 RBRACE }
119 IFRW if
119 LPARENT (
119 IDENT a
119 EQ ==
119 IDENT b
119 RPARENT )
119 LBRACE {
120 PRINTFRW printf
120 LPARENT (
120 STRCON "a==b\n"
120 RPARENT )
120 SEMICO ;
121 RBRACE }
122 IFRW if
122 LPARENT (
122 IDENT a
122 NEQ !=
122 IDENT b
122 RPARENT )
122 LBRACE {
123 PRINTFRW printf
123 LPARENT (
123 STRCON "a!=b\n"
123 RPARENT )
123 SEMICO ;
124 RBRACE }
125 WHILERW while
125 LPARENT (
125 INTCON 1
125 RPARENT )
125 LBRACE {
126 IDENT value
126 ASSIGN =
126 IDENT value
126 MINUS -
126 INTCON 1
126 SEMICO ;
127 IFRW if
127 LPARENT (
127 IDENT value
127 LES <
127 INTCON 10
127 AND &&
127 IDENT add_g
127 LPARENT (
127 RPARENT )
127 RPARENT )
127 LBRACE {
128 SEMICO ;
129 RBRACE }
130 IFRW if
130 LPARENT (
130 IDENT value
130 LES <
130 INTCON 0
130 RPARENT )
130 LBRACE {
131 BREAKRW break
131 SEMICO ;
132 RBRACE }
132 ELSERW else
132 LBRACE {
133 CONTINUERW continue
133 SEMICO ;
134 RBRACE }
135 RBRACE }
136 IFRW if
136 LPARENT (
136 INTCON 1
136 OR ||
136 IDENT add_g
136 LPARENT (
136 RPARENT )
136 RPARENT )
136 LBRACE {
137 SEMICO ;
138 RBRACE }
139 PRINTFRW printf
139 LPARENT (
139 STRCON "g = %d\n"
139 COMMA ,
139 IDENT g
139 RPARENT )
139 SEMICO ;
140 IDENT value
140 ASSIGN =
140 INTCON 5
140 SEMICO ;
141 IDENT value
141 ASSIGN =
141 MINUS -
141 PLUS +
141 MINUS -
141 INTCON 5
141 SEMICO ;
142 IDENT value
142 ASSIGN =
142 LPARENT (
142 IDENT value
142 PLUS +
142 IDENT a
142 RPARENT )
142 MULT *
142 IDENT b
142 SEMICO ;
143 IDENT value
143 ASSIGN =
143 MINUS -
143 IDENT value
143 SEMICO ;
144 IDENT value
144 ASSIGN =
144 IDENT without_para
144 LPARENT (
144 RPARENT )
144 SEMICO ;
145 IDENT value
145 ASSIGN =
145 IDENT with_para_1
145 LPARENT (
145 IDENT value
145 RPARENT )
145 SEMICO ;
146 IDENT value
146 ASSIGN =
146 IDENT with_para_2
146 LPARENT (
146 IDENT a
146 COMMA ,
146 IDENT b
146 RPARENT )
146 SEMICO ;
148 IDENT array
148 LBRACK [
148 INTCON 2
148 MULT *
148 INTCON 2
148 MINUS -
148 INTCON 3
148 RBRACK ]
148 ASSIGN =
148 INTCON 1
148 SEMICO ;
149 IDENT array
149 LBRACK [
149 IDENT a
149 PLUS +
149 IDENT a
149 MINUS -
149 IDENT b
149 RBRACK ]
149 ASSIGN =
149 INTCON 0
149 SEMICO ;
150 IDENT with_array_para_1_void
150 LPARENT (
150 IDENT vcaa1
150 LBRACK [
150 INTCON 0
150 RBRACK ]
150 RPARENT )
150 SEMICO ;
151 IDENT with_array_para_2_void
151 LPARENT (
151 IDENT vcaa1
151 LBRACK [
151 INTCON 0
151 RBRACK ]
151 COMMA ,
151 IDENT vcaa2
151 LBRACK [
151 INTCON 0
151 RBRACK ]
151 RPARENT )
151 SEMICO ;
152 IDENT array
152 LBRACK [
152 INTCON 0
152 RBRACK ]
152 ASSIGN =
152 IDENT with_array_para_1
152 LPARENT (
152 IDENT va1
152 RPARENT )
152 SEMICO ;
153 IDENT array
153 LBRACK [
153 INTCON 0
153 RBRACK ]
153 ASSIGN =
153 IDENT with_array_para_2
153 LPARENT (
153 IDENT vca1
153 COMMA ,
153 IDENT vca2
153 RPARENT )
153 SEMICO ;
154 IDENT vaa1
154 LBRACK [
154 INTCON 0
154 RBRACK ]
154 LBRACK [
154 INTCON 0
154 RBRACK ]
154 ASSIGN =
154 INTCON 1
154 SEMICO ;
155 IDENT vaa1
155 LBRACK [
155 INTCON 0
155 RBRACK ]
155 LBRACK [
155 INTCON 0
155 RBRACK ]
155 ASSIGN =
155 IDENT with_double_array_para_1
155 LPARENT (
155 IDENT vcaa1
155 RPARENT )
155 SEMICO ;
156 IDENT vaa1
156 LBRACK [
156 INTCON 0
156 RBRACK ]
156 LBRACK [
156 INTCON 0
156 RBRACK ]
156 ASSIGN =
156 IDENT with_double_array_para_2
156 LPARENT (
156 IDENT vcaa1
156 COMMA ,
156 IDENT vcaa2
156 RPARENT )
156 SEMICO ;
157 IDENT value
157 ASSIGN =
157 LPARENT (
157 IDENT value
157 PLUS +
157 IDENT array
157 LBRACK [
157 INTCON 0
157 RBRACK ]
157 RPARENT )
157 MULT *
157 LPARENT (
157 IDENT array
157 LBRACK [
157 INTCON 1
157 RBRACK ]
157 MINUS -
157 IDENT vaa1
157 LBRACK [
157 INTCON 0
157 RBRACK ]
157 LBRACK [
157 INTCON 0
157 RBRACK ]
157 RPARENT )
157 DIV /
157 INTCON 2
157 SEMICO ;
158 PRINTFRW printf
158 LPARENT (
158 STRCON "value = %d\n"
158 COMMA ,
158 IDENT value
158 MOD %
158 INTCON 2
158 RPARENT )
158 SEMICO ;
160 RETURNRW return
160 INTCON 0
160 SEMICO ;
161 RBRACE }
