Vn COMPUNIT
  Vn DECL
    Vn CONSTDECL
    Vt CONSTTK const
    Vn BTYPE
    Vt INTTK int
    Vn CONSTDEF
    Vt IDENFR c1
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt SEMICN ;
  Vn DECL
    Vn CONSTDECL
    Vt CONSTTK const
    Vn BTYPE
    Vt INTTK int
    Vn CONSTDEF
    Vt IDENFR cc1
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTDEF
    Vt IDENFR cc2
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt SEMICN ;
  Vn DECL
    Vn CONSTDECL
    Vt CONSTTK const
    Vn BTYPE
    Vt INTTK int
    Vn CONSTDEF
    Vt IDENFR ccc1
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTDEF
    Vt IDENFR ccc2
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTDEF
    Vt IDENFR ccc3
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt SEMICN ;
  Vn DECL
    Vn CONSTDECL
    Vt CONSTTK const
    Vn BTYPE
    Vt INTTK int
    Vn CONSTDEF
    Vt IDENFR ca1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn CONSTDECL
    Vt CONSTTK const
    Vn BTYPE
    Vt INTTK int
    Vn CONSTDEF
    Vt IDENFR cca1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn CONSTDEF
    Vt IDENFR cca2
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn CONSTDECL
    Vt CONSTTK const
    Vn BTYPE
    Vt INTTK int
    Vn CONSTDEF
    Vt IDENFR caa1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 3
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 4
    Vt RBRACE }
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn CONSTDECL
    Vt CONSTTK const
    Vn BTYPE
    Vt INTTK int
    Vn CONSTDEF
    Vt IDENFR ccaa1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 3
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 4
    Vt RBRACE }
    Vt RBRACE }
    Vt COMMA ,
    Vn CONSTDEF
    Vt IDENFR ccaa2
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn CONSTINITVAL
    Vt LBRACE {
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 3
    Vt COMMA ,
    Vn CONSTINITVAL
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 4
    Vt RBRACE }
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR v1
    Vt ASSIGN =
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR vc1
    Vt ASSIGN =
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn VARDEF
    Vt IDENFR vc2
    Vt ASSIGN =
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR vcc1
    Vt ASSIGN =
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn VARDEF
    Vt IDENFR vcc2
    Vt ASSIGN =
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn VARDEF
    Vt IDENFR vcc3
    Vt ASSIGN =
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR va1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR vca1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn VARDEF
    Vt IDENFR vca2
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR vaa1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 3
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 4
    Vt RBRACE }
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR vcaa1
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 3
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 4
    Vt RBRACE }
    Vt RBRACE }
    Vt COMMA ,
    Vn VARDEF
    Vt IDENFR vcaa2
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt ASSIGN =
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 1
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACE }
    Vt COMMA ,
    Vn INITVAL
    Vt LBRACE {
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 3
    Vt COMMA ,
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 4
    Vt RBRACE }
    Vt RBRACE }
    Vt SEMICN ;
  Vn DECL
    Vn VARDECL
    Vn BTYPE
    Vt INTTK int
    Vn VARDEF
    Vt IDENFR g
    Vt ASSIGN =
    Vn INITVAL
    Vn EXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 0
    Vt SEMICN ;
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR without_para
    Vt LPARENT (
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 5
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR with_para_1
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR p
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR with_para_2
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR p1
    Vt COMMA ,
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR p2
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p1
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p2
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR with_array_para_1
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR with_array_para_2
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt COMMA ,
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR b
    Vt LBRACK [
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR with_double_array_para_1
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR with_double_array_para_2
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt COMMA ,
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR b
    Vt LBRACK [
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR without_para_void
    Vt LPARENT (
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt VOIDTK void
    Vt IDENFR with_para_1_void
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR p
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR p1
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt VOIDTK void
    Vt IDENFR with_para_2_void
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR p1
    Vt COMMA ,
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR p2
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR p
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p1
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR p2
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt VOIDTK void
    Vt IDENFR with_array_para_1_void
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR p
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt VOIDTK void
    Vt IDENFR with_array_para_2_void
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt COMMA ,
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR b
    Vt LBRACK [
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR p
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt VOIDTK void
    Vt IDENFR with_double_array_para_1_void
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 10
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR p
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt VOIDTK void
    Vt IDENFR with_double_array_para_2_void
    Vt LPARENT (
    Vn FUNCFPARAMS
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR a
    Vt LBRACK [
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt COMMA ,
    Vn FUNCFPARAM
    Vn BTYPE
    Vt INTTK int
    Vt IDENFR b
    Vt LBRACK [
    Vt RBRACK ]
    Vt LBRACK [
    Vn CONSTEXP
    Vn ADDEXP
    Vn MULEXP
    Vn UNARYEXP
    Vn PRIMARYEXP
    Vn NUM
    Vt INTCON 2
    Vt RBRACK ]
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR p
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vt SEMICN ;
      Vt RBRACE }
  Vn FUNCDEF
    Vn FUNCTYPE
    Vt INTTK int
    Vt IDENFR add_g
    Vt LPARENT (
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR g
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR g
        Vt PLUS +
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR g
        Vt SEMICN ;
      Vt RBRACE }
  Vn MAINFUNCDEF
    Vt INTTK int
    Vt MAINTK main
    Vt LPARENT (
    Vt RPARENT )
    Vn BLOCK
      Vt LBRACE {
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR n
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt COMMA ,
        Vn VARDEF
        Vt IDENFR m
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR i
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR a
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt COMMA ,
        Vn VARDEF
        Vt IDENFR b
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 2
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR value
        Vt ASSIGN =
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 5
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn DECL
        Vn VARDECL
        Vn BTYPE
        Vt INTTK int
        Vn VARDEF
        Vt IDENFR array
        Vt LBRACK [
        Vn CONSTEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 2
        Vt RBRACK ]
        Vt ASSIGN =
        Vn INITVAL
        Vt LBRACE {
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt COMMA ,
        Vn INITVAL
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACE }
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR n
        Vt ASSIGN =
        Vt GETINTTK getint
        Vt LPARENT (
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR m
        Vt ASSIGN =
        Vt GETINTTK getint
        Vt LPARENT (
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vt PRINTFTK printf
        Vt LPARENT (
        Vt STRCON "19373700\n"
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vt PRINTFTK printf
        Vt LPARENT (
        Vt STRCON "%d\n"
        Vt COMMA ,
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR n
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR n
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR n
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR m
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR m
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vt LPARENT (
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR n
        Vt PLUS +
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR m
        Vt RPARENT )
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR n
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "false\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
        Vt ELSETK else
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "true\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn UNARYOP
        Vt NOT !
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "true\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
        Vt ELSETK else
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "false\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LSS <
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "a<b\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt GRE >
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "a>b\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt LEQ <=
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "a<=b\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt GEQ >=
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "a>=b\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt EQL ==
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "a==b\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt NEQ !=
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt PRINTFTK printf
            Vt LPARENT (
            Vt STRCON "a!=b\n"
            Vt RPARENT )
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt WHILETK while
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vn LVAL
            Vt IDENFR value
            Vt ASSIGN =
            Vn EXP
            Vn ADDEXP
            Vn MULEXP
            Vn UNARYEXP
            Vn PRIMARYEXP
            Vn LVAL
            Vt IDENFR value
            Vt MINU -
            Vn MULEXP
            Vn UNARYEXP
            Vn PRIMARYEXP
            Vn NUM
            Vt INTCON 1
            Vt SEMICN ;
          Vn BLOCKITEM
            Vn STMT
            Vt IFTK if
            Vt LPARENT (
            Vn COND
            Vn LOREXP
            Vn LANDEXP
            Vn EQEXP
            Vn RELEXP
            Vn ADDEXP
            Vn MULEXP
            Vn UNARYEXP
            Vn PRIMARYEXP
            Vn LVAL
            Vt IDENFR value
            Vt LSS <
            Vn ADDEXP
            Vn MULEXP
            Vn UNARYEXP
            Vn PRIMARYEXP
            Vn NUM
            Vt INTCON 10
            Vt AND &&
            Vn EQEXP
            Vn RELEXP
            Vn ADDEXP
            Vn MULEXP
            Vn UNARYEXP
            Vt IDENFR add_g
            Vt LPARENT (
            Vt RPARENT )
            Vt RPARENT )
            Vn STMT
            Vn BLOCK
              Vt LBRACE {
              Vn BLOCKITEM
                Vn STMT
                Vt SEMICN ;
              Vt RBRACE }
          Vn BLOCKITEM
            Vn STMT
            Vt IFTK if
            Vt LPARENT (
            Vn COND
            Vn LOREXP
            Vn LANDEXP
            Vn EQEXP
            Vn RELEXP
            Vn ADDEXP
            Vn MULEXP
            Vn UNARYEXP
            Vn PRIMARYEXP
            Vn LVAL
            Vt IDENFR value
            Vt LSS <
            Vn ADDEXP
            Vn MULEXP
            Vn UNARYEXP
            Vn PRIMARYEXP
            Vn NUM
            Vt INTCON 0
            Vt RPARENT )
            Vn STMT
            Vn BLOCK
              Vt LBRACE {
              Vn BLOCKITEM
                Vn STMT
                Vt BREAKTK break
                Vt SEMICN ;
              Vt RBRACE }
            Vt ELSETK else
            Vn STMT
            Vn BLOCK
              Vt LBRACE {
              Vn BLOCKITEM
                Vn STMT
                Vt CONTINUETK continue
                Vt SEMICN ;
              Vt RBRACE }
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt IFTK if
        Vt LPARENT (
        Vn COND
        Vn LOREXP
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt OR ||
        Vn LANDEXP
        Vn EQEXP
        Vn RELEXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR add_g
        Vt LPARENT (
        Vt RPARENT )
        Vt RPARENT )
        Vn STMT
        Vn BLOCK
          Vt LBRACE {
          Vn BLOCKITEM
            Vn STMT
            Vt SEMICN ;
          Vt RBRACE }
      Vn BLOCKITEM
        Vn STMT
        Vt PRINTFTK printf
        Vt LPARENT (
        Vt STRCON "g = %d\n"
        Vt COMMA ,
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR g
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 5
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn UNARYOP
        Vt MINU -
        Vn UNARYEXP
        Vn UNARYOP
        Vt PLUS +
        Vn UNARYEXP
        Vn UNARYOP
        Vt MINU -
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 5
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vt LPARENT (
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR value
        Vt PLUS +
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt RPARENT )
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn UNARYOP
        Vt MINU -
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR value
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR without_para
        Vt LPARENT (
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_para_1
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR value
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_para_2
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt COMMA ,
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR array
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 2
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 2
        Vt MINU -
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 3
        Vt RBRACK ]
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR array
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt PLUS +
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR a
        Vt MINU -
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR b
        Vt RBRACK ]
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_array_para_1_void
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vcaa1
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_array_para_2_void
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vcaa1
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt COMMA ,
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vcaa2
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR array
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_array_para_1
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR va1
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR array
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_array_para_2
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vca1
        Vt COMMA ,
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vca2
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR vaa1
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR vaa1
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_double_array_para_1
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vcaa1
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR vaa1
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vt IDENFR with_double_array_para_2
        Vt LPARENT (
        Vn FUNCRPARAMS
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vcaa1
        Vt COMMA ,
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vcaa2
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vn LVAL
        Vt IDENFR value
        Vt ASSIGN =
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vt LPARENT (
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR value
        Vt PLUS +
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR array
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt RPARENT )
        Vt MULT *
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vt LPARENT (
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR array
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 1
        Vt RBRACK ]
        Vt MINU -
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR vaa1
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt LBRACK [
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt RBRACK ]
        Vt RPARENT )
        Vt DIV /
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 2
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vt PRINTFTK printf
        Vt LPARENT (
        Vt STRCON "value = %d\n"
        Vt COMMA ,
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn LVAL
        Vt IDENFR value
        Vt MOD %
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 2
        Vt RPARENT )
        Vt SEMICN ;
      Vn BLOCKITEM
        Vn STMT
        Vt RETURNTK return
        Vn EXP
        Vn ADDEXP
        Vn MULEXP
        Vn UNARYEXP
        Vn PRIMARYEXP
        Vn NUM
        Vt INTCON 0
        Vt SEMICN ;
      Vt RBRACE }
