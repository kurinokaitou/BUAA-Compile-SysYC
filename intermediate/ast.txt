<CompUnit>
CONSTTK const
INTTK int
IDENFR c1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR cc1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR cc2
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR ccc1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR ccc2
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR ccc3
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR ca1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR cca1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR cca2
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR caa1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
COMMA ,
LBRACE {
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
CONSTTK const
INTTK int
IDENFR ccaa1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
COMMA ,
LBRACE {
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR ccaa2
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
COMMA ,
LBRACE {
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
RBRACE }
<ConstInitVal>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
INTTK int
IDENFR v1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR vc1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR vc2
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR vcc1
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR vcc2
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
COMMA ,
IDENFR vcc3
ASSIGN =
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR va1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR vca1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
<VarDef>
COMMA ,
IDENFR vca2
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR vaa1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
COMMA ,
LBRACE {
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR vcaa1
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
COMMA ,
LBRACE {
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
RBRACE }
<InitVal>
<VarDef>
COMMA ,
IDENFR vcaa2
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
COMMA ,
LBRACE {
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
COMMA ,
INTCON 4
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
RBRACE }
<InitVal>
RBRACE }
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
IDENFR g
ASSIGN =
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
<InitVal>
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
<FuncType>
IDENFR without_para
LPARENT (
RPARENT )
  LBRACE {
    RETURNTK return
    INTCON 5
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR with_para_1
LPARENT (
INTTK int
IDENFR p
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR p
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR p
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR with_para_2
LPARENT (
INTTK int
IDENFR p1
<FuncFParam>
COMMA ,
INTTK int
IDENFR p2
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR p1
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR p2
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR with_array_para_1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR with_array_para_2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR b
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR with_double_array_para_1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR with_double_array_para_2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR b
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR without_para_void
LPARENT (
RPARENT )
  LBRACE {
    RETURNTK return
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR with_para_1_void
LPARENT (
INTTK int
IDENFR p
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    INTTK int
    IDENFR p1
    ASSIGN =
    IDENFR p
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR p
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
  RBRACE }
  <Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR with_para_2_void
LPARENT (
INTTK int
IDENFR p1
<FuncFParam>
COMMA ,
INTTK int
IDENFR p2
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    INTTK int
    IDENFR p
    ASSIGN =
    IDENFR p1
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR p2
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
  RBRACE }
  <Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR with_array_para_1_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    INTTK int
    IDENFR p
    ASSIGN =
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
  RBRACE }
  <Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR with_array_para_2_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    INTTK int
    IDENFR p
    ASSIGN =
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR b
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
  RBRACE }
  <Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR with_double_array_para_1_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    INTTK int
    IDENFR p
    ASSIGN =
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
  RBRACE }
  <Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR with_double_array_para_2_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    INTTK int
    IDENFR p
    ASSIGN =
    IDENFR a
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR b
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    RETURNTK return
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR add_g
LPARENT (
RPARENT )
  LBRACE {
    IDENFR g
    <LVal>
    ASSIGN =
    IDENFR g
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    PLUS +
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    RETURNTK return
    IDENFR g
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
  LBRACE {
    INTTK int
    IDENFR n
    ASSIGN =
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    COMMA ,
    IDENFR m
    ASSIGN =
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    INTTK int
    IDENFR i
    ASSIGN =
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    INTTK int
    IDENFR a
    ASSIGN =
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    COMMA ,
    IDENFR b
    ASSIGN =
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    INTTK int
    IDENFR value
    ASSIGN =
    INTCON 5
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    INTTK int
    IDENFR array
    LBRACK [
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <ConstExp>
    RBRACK ]
    ASSIGN =
    LBRACE {
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    COMMA ,
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    RBRACE }
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    IDENFR n
    <LVal>
    ASSIGN =
    GETINTTK getint
    LPARENT (
    RPARENT )
    SEMICN ;
    <Stmt>
    IDENFR m
    <LVal>
    ASSIGN =
    GETINTTK getint
    LPARENT (
    RPARENT )
    SEMICN ;
    <Stmt>
    PRINTFTK printf
    LPARENT (
    STRCON "19373700\n"
    RPARENT )
    SEMICN ;
    <Stmt>
    PRINTFTK printf
    LPARENT (
    STRCON "%d\n"
    COMMA ,
    IDENFR n
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    SEMICN ;
    <Stmt>
    IDENFR n
    <LVal>
    ASSIGN =
    IDENFR n
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR m
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR m
    <LVal>
    ASSIGN =
    LPARENT (
    IDENFR n
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    PLUS +
    IDENFR m
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR n
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
      LBRACE {
      RBRACE }
      <Block>
    <Stmt>
    PRINTFTK printf
    LPARENT (
    STRCON "g = %d\n"
    COMMA ,
    IDENFR g
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    INTCON 5
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    MINU -
    <UnaryOp>
    PLUS +
    <UnaryOp>
    MINU -
    <UnaryOp>
    INTCON 5
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <UnaryExp>
    <UnaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    LPARENT (
    IDENFR value
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    PLUS +
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    IDENFR b
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    MINU -
    <UnaryOp>
    IDENFR value
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    IDENFR without_para
    LPARENT (
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    IDENFR with_para_1
    LPARENT (
    IDENFR value
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    IDENFR with_para_2
    LPARENT (
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    COMMA ,
    IDENFR b
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR array
    LBRACK [
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    MINU -
    INTCON 3
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    ASSIGN =
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR array
    LBRACK [
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    PLUS +
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    MINU -
    IDENFR b
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    ASSIGN =
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR with_array_para_1_void
    LPARENT (
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR with_array_para_2_void
    LPARENT (
    IDENFR vcaa1
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    COMMA ,
    IDENFR vcaa2
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR array
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    ASSIGN =
    IDENFR with_array_para_1
    LPARENT (
    IDENFR va1
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR array
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    ASSIGN =
    IDENFR with_array_para_2
    LPARENT (
    IDENFR vca2
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR vaa1
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    ASSIGN =
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR vaa1
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    ASSIGN =
    IDENFR with_double_array_para_1
    LPARENT (
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR vaa1
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    ASSIGN =
    IDENFR with_double_array_para_2
    LPARENT (
    IDENFR vcaa1
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    COMMA ,
    IDENFR vcaa2
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IDENFR value
    <LVal>
    ASSIGN =
    LPARENT (
    IDENFR value
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    PLUS +
    IDENFR array
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MULT *
    LPARENT (
    IDENFR array
    LBRACK [
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    MINU -
    IDENFR vaa1
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    LBRACK [
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RBRACK ]
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    DIV /
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    PRINTFTK printf
    LPARENT (
    STRCON "value = %d\n"
    COMMA ,
    IDENFR value
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    MOD %
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    SEMICN ;
    <Stmt>
    RETURNTK return
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<MainFuncDef>
