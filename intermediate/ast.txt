<CompUnit>
INTTK int
IDENFR t
<VarDef>
SEMICN ;
<VarDecl>
INTTK int
<FuncType>
IDENFR writeElement
LPARENT (
INTTK int
IDENFR b
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR a
<FuncFParam>
COMMA ,
INTTK int
IDENFR c
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR findElement
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR x
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    RETURNTK return
    IDENFR x
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
VOIDTK void
<FuncType>
IDENFR element
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR x
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
  RBRACE }
  <Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR f
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR x
<FuncFParam>
<FuncFParams>
RPARENT )
  LBRACE {
    IDENFR t
    <LVal>
    ASSIGN =
    IDENFR findElement
    LPARENT (
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    COMMA ,
    IDENFR x
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
    IFTK if
    LPARENT (
    IDENFR x
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <RelExp>
    <EqExp>
    NEQ !=
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <RelExp>
    <EqExp>
    <LAndExp>
    <LOrExp>
    <Cond>
    RPARENT )
      LBRACE {
        RETURNTK return
        IDENFR t
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        SEMICN ;
        <Stmt>
      RBRACE }
      <Block>
    <Stmt>
    ELSETK else
      LBRACE {
        IDENFR writeElement
        LPARENT (
        IDENFR a
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        COMMA ,
        IDENFR x
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        MINU -
        INTCON 1
        <Number>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        COMMA ,
        IDENFR x
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        <FuncRParams>
        RPARENT )
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        SEMICN ;
        <Stmt>
        IDENFR writeElement
        LPARENT (
        IDENFR a
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        COMMA ,
        IDENFR x
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        MINU -
        INTCON 2
        <Number>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        COMMA ,
        IDENFR x
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        <FuncRParams>
        RPARENT )
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        SEMICN ;
        <Stmt>
        RETURNTK return
        IDENFR f
        LPARENT (
        IDENFR a
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        COMMA ,
        IDENFR x
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        MINU -
        INTCON 2
        <Number>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        <FuncRParams>
        RPARENT )
        <UnaryExp>
        <MulExp>
        <AddExp>
        PLUS +
        IDENFR f
        LPARENT (
        IDENFR a
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        COMMA ,
        IDENFR x
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        MINU -
        INTCON 1
        <Number>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        <FuncRParams>
        RPARENT )
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        SEMICN ;
        <Stmt>
      RBRACE }
      <Block>
    <Stmt>
    <Stmt>
    RETURNTK return
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
  LBRACE {
    INTTK int
    IDENFR a
    LBRACK [
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <ConstExp>
    RBRACK ]
    ASSIGN =
    LBRACE {
    INTCON 2
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    COMMA ,
    INTCON 3
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    RBRACE }
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    PRINTFTK printf
    LPARENT (
    STRCON "%d\n"
    COMMA ,
    IDENFR f
    LPARENT (
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    COMMA ,
    INTCON 5
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <FuncRParams>
    RPARENT )
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    RPARENT )
    SEMICN ;
    <Stmt>
    RETURNTK return
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<MainFuncDef>
