<CompUnit>
INTTK int
MAINTK main
LPARENT (
RPARENT )
  LBRACE {
    INTTK int
    IDENFR a
    ASSIGN =
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    INTTK int
    IDENFR b
    ASSIGN =
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    <InitVal>
    <VarDef>
    SEMICN ;
    <VarDecl>
    IFTK if
    LPARENT (
    IDENFR a
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <RelExp>
    <EqExp>
    EQL ==
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <RelExp>
    <EqExp>
    <LAndExp>
    AND &&
    IDENFR b
    <LVal>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <RelExp>
    <EqExp>
    EQL ==
    INTCON 1
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <RelExp>
    <EqExp>
    <LAndExp>
    <LOrExp>
    <Cond>
    RPARENT )
      LBRACE {
        PRINTFTK printf
        LPARENT (
        STRCON "%d"
        COMMA ,
        IDENFR a
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        RPARENT )
        SEMICN ;
        <Stmt>
      RBRACE }
      <Block>
    <Stmt>
    ELSETK else
      LBRACE {
        PRINTFTK printf
        LPARENT (
        STRCON "%d"
        COMMA ,
        IDENFR b
        <LVal>
        <PrimaryExp>
        <UnaryExp>
        <MulExp>
        <AddExp>
        <Exp>
        RPARENT )
        SEMICN ;
        <Stmt>
      RBRACE }
      <Block>
    <Stmt>
    <Stmt>
    RETURNTK return
    INTCON 0
    <Number>
    <PrimaryExp>
    <UnaryExp>
    <MulExp>
    <AddExp>
    <Exp>
    SEMICN ;
    <Stmt>
  RBRACE }
  <Block>
<MainFuncDef>
