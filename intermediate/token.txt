1 CONSTRW const
1 INTRW int
1 IDENT c1
1 ASSIGN =
1 INTCON 1
1 SEMICO ;
2 CONSTRW const
2 INTRW int
2 IDENT cc1
2 ASSIGN =
2 INTCON 1
2 COMMA ,
2 IDENT cc2
2 ASSIGN =
2 INTCON 1
2 SEMICO ;
3 CONSTRW const
3 INTRW int
3 IDENT ccc1
3 ASSIGN =
3 INTCON 1
3 COMMA ,
3 IDENT ccc2
3 ASSIGN =
3 INTCON 1
3 COMMA ,
3 IDENT ccc3
3 ASSIGN =
3 INTCON 1
3 SEMICO ;
4 CONSTRW const
4 INTRW int
4 IDENT ca1
4 LBRACK [
4 INTCON 2
4 RBRACK ]
4 ASSIGN =
4 LBRACE {
4 INTCON 1
4 COMMA ,
4 INTCON 2
4 RBRACE }
4 SEMICO ;
5 CONSTRW const
5 INTRW int
5 IDENT cca1
5 LBRACK [
5 INTCON 2
5 RBRACK ]
5 ASSIGN =
5 LBRACE {
5 INTCON 1
5 COMMA ,
5 INTCON 2
5 RBRACE }
5 COMMA ,
5 IDENT cca2
5 LBRACK [
5 INTCON 2
5 RBRACK ]
5 ASSIGN =
5 LBRACE {
5 INTCON 1
5 COMMA ,
5 INTCON 2
5 RBRACE }
5 SEMICO ;
6 CONSTRW const
6 INTRW int
6 IDENT caa1
6 LBRACK [
6 INTCON 2
6 RBRACK ]
6 LBRACK [
6 INTCON 2
6 RBRACK ]
6 ASSIGN =
6 LBRACE {
6 LBRACE {
6 INTCON 1
6 COMMA ,
6 INTCON 2
6 RBRACE }
6 COMMA ,
6 LBRACE {
6 INTCON 3
6 COMMA ,
6 INTCON 4
6 RBRACE }
6 RBRACE }
6 SEMICO ;
7 CONSTRW const
7 INTRW int
7 IDENT ccaa1
7 LBRACK [
7 INTCON 2
7 RBRACK ]
7 LBRACK [
7 INTCON 2
7 RBRACK ]
7 ASSIGN =
7 LBRACE {
7 LBRACE {
7 INTCON 1
7 COMMA ,
7 INTCON 2
7 RBRACE }
7 COMMA ,
7 LBRACE {
7 INTCON 3
7 COMMA ,
7 INTCON 4
7 RBRACE }
7 RBRACE }
7 COMMA ,
7 IDENT ccaa2
7 LBRACK [
7 INTCON 2
7 RBRACK ]
7 LBRACK [
7 INTCON 2
7 RBRACK ]
7 ASSIGN =
7 LBRACE {
7 LBRACE {
7 INTCON 1
7 COMMA ,
7 INTCON 2
7 RBRACE }
7 COMMA ,
7 LBRACE {
7 INTCON 3
7 COMMA ,
7 INTCON 4
7 RBRACE }
7 RBRACE }
7 SEMICO ;
9 INTRW int
9 IDENT v1
9 ASSIGN =
9 INTCON 1
9 SEMICO ;
10 INTRW int
10 IDENT vc1
10 ASSIGN =
10 INTCON 1
10 COMMA ,
10 IDENT vc2
10 ASSIGN =
10 INTCON 1
10 SEMICO ;
11 INTRW int
11 IDENT vcc1
11 ASSIGN =
11 INTCON 1
11 COMMA ,
11 IDENT vcc2
11 ASSIGN =
11 INTCON 1
11 COMMA ,
11 IDENT vcc3
11 ASSIGN =
11 INTCON 1
11 SEMICO ;
12 INTRW int
12 IDENT va1
12 LBRACK [
12 INTCON 2
12 RBRACK ]
12 ASSIGN =
12 LBRACE {
12 INTCON 1
12 COMMA ,
12 INTCON 2
12 RBRACE }
12 SEMICO ;
13 INTRW int
13 IDENT vca1
13 LBRACK [
13 INTCON 2
13 RBRACK ]
13 ASSIGN =
13 LBRACE {
13 INTCON 1
13 COMMA ,
13 INTCON 2
13 RBRACE }
13 COMMA ,
13 IDENT vca2
13 LBRACK [
13 INTCON 2
13 RBRACK ]
13 ASSIGN =
13 LBRACE {
13 INTCON 1
13 COMMA ,
13 INTCON 2
13 RBRACE }
13 SEMICO ;
14 INTRW int
14 IDENT vaa1
14 LBRACK [
14 INTCON 2
14 RBRACK ]
14 LBRACK [
14 INTCON 2
14 RBRACK ]
14 ASSIGN =
14 LBRACE {
14 LBRACE {
14 INTCON 1
14 COMMA ,
14 INTCON 2
14 RBRACE }
14 COMMA ,
14 LBRACE {
14 INTCON 3
14 COMMA ,
14 INTCON 4
14 RBRACE }
14 RBRACE }
14 SEMICO ;
15 INTRW int
15 IDENT vcaa1
15 LBRACK [
15 INTCON 2
15 RBRACK ]
15 LBRACK [
15 INTCON 2
15 RBRACK ]
15 ASSIGN =
15 LBRACE {
15 LBRACE {
15 INTCON 1
15 COMMA ,
15 INTCON 2
15 RBRACE }
15 COMMA ,
15 LBRACE {
15 INTCON 3
15 COMMA ,
15 INTCON 4
15 RBRACE }
15 RBRACE }
15 COMMA ,
15 IDENT vcaa2
15 LBRACK [
15 INTCON 2
15 RBRACK ]
15 LBRACK [
15 INTCON 2
15 RBRACK ]
15 ASSIGN =
15 LBRACE {
15 LBRACE {
15 INTCON 1
15 COMMA ,
15 INTCON 2
15 RBRACE }
15 COMMA ,
15 LBRACE {
15 INTCON 3
15 COMMA ,
15 INTCON 4
15 RBRACE }
15 RBRACE }
15 SEMICO ;
16 INTRW int
16 IDENT g
16 ASSIGN =
16 INTCON 0
16 SEMICO ;
17 INTRW int
17 IDENT without_para
17 LPARENT (
17 RPARENT )
17 LBRACE {
18 RETURNRW return
18 INTCON 5
18 SEMICO ;
19 RBRACE }
21 INTRW int
21 IDENT with_para_1
21 LPARENT (
21 INTRW int
21 IDENT p
21 RPARENT )
21 LBRACE {
22 RETURNRW return
22 IDENT p
22 MULT *
22 IDENT p
22 SEMICO ;
23 RBRACE }
25 INTRW int
25 IDENT with_para_2
25 LPARENT (
25 INTRW int
25 IDENT p1
25 COMMA ,
25 INTRW int
25 IDENT p2
25 RPARENT )
25 LBRACE {
26 RETURNRW return
26 IDENT p1
26 MULT *
26 IDENT p2
26 SEMICO ;
27 RBRACE }
29 INTRW int
29 IDENT with_array_para_1
29 LPARENT (
29 INTRW int
29 IDENT a
29 LBRACK [
29 RBRACK ]
29 RPARENT )
29 LBRACE {
30 RETURNRW return
30 IDENT a
30 LBRACK [
30 INTCON 0
30 RBRACK ]
30 MULT *
30 IDENT a
30 LBRACK [
30 INTCON 0
30 RBRACK ]
30 SEMICO ;
31 RBRACE }
33 INTRW int
33 IDENT with_array_para_2
33 LPARENT (
33 INTRW int
33 IDENT a
33 LBRACK [
33 RBRACK ]
33 COMMA ,
33 INTRW int
33 IDENT b
33 LBRACK [
33 RBRACK ]
33 RPARENT )
33 LBRACE {
34 RETURNRW return
34 IDENT a
34 LBRACK [
34 INTCON 0
34 RBRACK ]
34 MULT *
34 IDENT b
34 LBRACK [
34 INTCON 0
34 RBRACK ]
34 SEMICO ;
35 RBRACE }
37 INTRW int
37 IDENT with_double_array_para_1
37 LPARENT (
37 INTRW int
37 IDENT a
37 LBRACK [
37 RBRACK ]
37 LBRACK [
37 INTCON 2
37 RBRACK ]
37 RPARENT )
37 LBRACE {
38 RETURNRW return
38 IDENT a
38 LBRACK [
38 INTCON 0
38 RBRACK ]
38 LBRACK [
38 INTCON 0
38 RBRACK ]
38 MULT *
38 IDENT a
38 LBRACK [
38 INTCON 0
38 RBRACK ]
38 LBRACK [
38 INTCON 0
38 RBRACK ]
38 SEMICO ;
39 RBRACE }
41 INTRW int
41 IDENT with_double_array_para_2
41 LPARENT (
41 INTRW int
41 IDENT a
41 LBRACK [
41 RBRACK ]
41 LBRACK [
41 INTCON 2
41 RBRACK ]
41 COMMA ,
41 INTRW int
41 IDENT b
41 LBRACK [
41 RBRACK ]
41 LBRACK [
41 INTCON 2
41 RBRACK ]
41 RPARENT )
41 LBRACE {
42 RETURNRW return
42 IDENT a
42 LBRACK [
42 INTCON 0
42 RBRACK ]
42 LBRACK [
42 INTCON 0
42 RBRACK ]
42 MULT *
42 IDENT b
42 LBRACK [
42 INTCON 0
42 RBRACK ]
42 LBRACK [
42 INTCON 0
42 RBRACK ]
42 SEMICO ;
43 RBRACE }
45 INTRW int
45 IDENT without_para_void
45 LPARENT (
45 RPARENT )
45 LBRACE {
46 RETURNRW return
46 INTCON 1
46 SEMICO ;
47 RBRACE }
49 VOIDRW void
49 IDENT with_para_1_void
49 LPARENT (
49 INTRW int
49 IDENT p
49 RPARENT )
49 LBRACE {
50 INTRW int
50 IDENT p1
50 ASSIGN =
50 IDENT p
50 MULT *
50 IDENT p
50 SEMICO ;
51 RBRACE }
53 VOIDRW void
53 IDENT with_para_2_void
53 LPARENT (
53 INTRW int
53 IDENT p1
53 COMMA ,
53 INTRW int
53 IDENT p2
53 RPARENT )
53 LBRACE {
54 INTRW int
54 IDENT p
54 ASSIGN =
54 IDENT p1
54 MULT *
54 IDENT p2
54 SEMICO ;
55 RBRACE }
57 VOIDRW void
57 IDENT with_array_para_1_void
57 LPARENT (
57 INTRW int
57 IDENT a
57 LBRACK [
57 RBRACK ]
57 RPARENT )
57 LBRACE {
58 INTRW int
58 IDENT p
58 ASSIGN =
58 IDENT a
58 LBRACK [
58 INTCON 0
58 RBRACK ]
58 MULT *
58 IDENT a
58 LBRACK [
58 INTCON 0
58 RBRACK ]
58 SEMICO ;
59 RBRACE }
61 VOIDRW void
61 IDENT with_array_para_2_void
61 LPARENT (
61 INTRW int
61 IDENT a
61 LBRACK [
61 RBRACK ]
61 COMMA ,
61 INTRW int
61 IDENT b
61 LBRACK [
61 RBRACK ]
61 RPARENT )
61 LBRACE {
62 INTRW int
62 IDENT p
62 ASSIGN =
62 IDENT a
62 LBRACK [
62 INTCON 0
62 RBRACK ]
62 MULT *
62 IDENT b
62 LBRACK [
62 INTCON 0
62 RBRACK ]
62 SEMICO ;
63 RBRACE }
65 VOIDRW void
65 IDENT with_double_array_para_1_void
65 LPARENT (
65 INTRW int
65 IDENT a
65 LBRACK [
65 RBRACK ]
65 LBRACK [
65 INTCON 10
65 RBRACK ]
65 RPARENT )
65 LBRACE {
66 INTRW int
66 IDENT p
66 ASSIGN =
66 IDENT a
66 LBRACK [
66 INTCON 0
66 RBRACK ]
66 LBRACK [
66 INTCON 0
66 RBRACK ]
66 MULT *
66 IDENT a
66 LBRACK [
66 INTCON 0
66 RBRACK ]
66 LBRACK [
66 INTCON 0
66 RBRACK ]
66 SEMICO ;
67 RBRACE }
69 VOIDRW void
69 IDENT with_double_array_para_2_void
69 LPARENT (
69 INTRW int
69 IDENT a
69 LBRACK [
69 RBRACK ]
69 LBRACK [
69 INTCON 2
69 RBRACK ]
69 COMMA ,
69 INTRW int
69 IDENT b
69 LBRACK [
69 RBRACK ]
69 LBRACK [
69 INTCON 2
69 RBRACK ]
69 RPARENT )
69 LBRACE {
70 INTRW int
70 IDENT p
70 ASSIGN =
70 IDENT a
70 LBRACK [
70 INTCON 0
70 RBRACK ]
70 LBRACK [
70 INTCON 0
70 RBRACK ]
70 MULT *
70 IDENT b
70 LBRACK [
70 INTCON 0
70 RBRACK ]
70 LBRACK [
70 INTCON 0
70 RBRACK ]
70 SEMICO ;
71 RETURNRW return
71 SEMICO ;
72 RBRACE }
74 INTRW int
74 IDENT add_g
74 LPARENT (
74 RPARENT )
74 LBRACE {
75 IDENT g
75 ASSIGN =
75 IDENT g
75 PLUS +
75 INTCON 1
75 SEMICO ;
76 RETURNRW return
76 IDENT g
76 SEMICO ;
77 RBRACE }
79 INTRW int
79 MAINRW main
79 LPARENT (
79 RPARENT )
79 LBRACE {
80 INTRW int
80 IDENT n
80 ASSIGN =
80 INTCON 0
80 COMMA ,
80 IDENT m
80 ASSIGN =
80 INTCON 0
80 SEMICO ;
81 INTRW int
81 IDENT i
81 ASSIGN =
81 INTCON 0
81 SEMICO ;
82 INTRW int
82 IDENT a
82 ASSIGN =
82 INTCON 1
82 COMMA ,
82 IDENT b
82 ASSIGN =
82 INTCON 2
82 SEMICO ;
83 INTRW int
83 IDENT value
83 ASSIGN =
83 INTCON 5
83 SEMICO ;
84 INTRW int
84 IDENT array
84 LBRACK [
84 INTCON 2
84 RBRACK ]
84 ASSIGN =
84 LBRACE {
84 INTCON 0
84 COMMA ,
84 INTCON 0
84 RBRACE }
84 SEMICO ;
85 IDENT n
85 ASSIGN =
85 GETINTRW getint
85 LPARENT (
85 RPARENT )
85 SEMICO ;
86 IDENT m
86 ASSIGN =
86 GETINTRW getint
86 LPARENT (
86 RPARENT )
86 SEMICO ;
87 PRINTFRW printf
87 LPARENT (
87 STRCON "19373700\n"
87 RPARENT )
87 SEMICO ;
88 PRINTFRW printf
88 LPARENT (
88 STRCON "%d\n"
88 COMMA ,
88 IDENT n
88 RPARENT )
88 SEMICO ;
89 IDENT n
89 ASSIGN =
89 IDENT n
89 MULT *
89 IDENT m
89 SEMICO ;
90 IDENT m
90 ASSIGN =
90 LPARENT (
90 IDENT n
90 PLUS +
90 IDENT m
90 RPARENT )
90 MULT *
90 IDENT n
90 SEMICO ;
91 LBRACE {
92 RBRACE }
93 IFRW if
93 LPARENT (
93 INTCON 0
93 RPARENT )
93 LBRACE {
94 PRINTFRW printf
94 LPARENT (
94 STRCON "false\n"
94 RPARENT )
94 SEMICO ;
95 RBRACE }
95 ELSERW else
95 LBRACE {
96 PRINTFRW printf
96 LPARENT (
96 STRCON "true\n"
96 RPARENT )
96 SEMICO ;
97 RBRACE }
99 IFRW if
99 LPARENT (
99 NOT !
99 INTCON 0
99 RPARENT )
99 LBRACE {
100 PRINTFRW printf
100 LPARENT (
100 STRCON "true\n"
100 RPARENT )
100 SEMICO ;
101 RBRACE }
101 ELSERW else
101 LBRACE {
102 PRINTFRW printf
102 LPARENT (
102 STRCON "false\n"
102 RPARENT )
102 SEMICO ;
103 RBRACE }
105 IFRW if
105 LPARENT (
105 IDENT a
105 LES <
105 IDENT b
105 RPARENT )
105 LBRACE {
106 PRINTFRW printf
106 LPARENT (
106 STRCON "a<b\n"
106 RPARENT )
106 SEMICO ;
107 RBRACE }
108 IFRW if
108 LPARENT (
108 IDENT a
108 GREAT >
108 IDENT b
108 RPARENT )
108 LBRACE {
109 PRINTFRW printf
109 LPARENT (
109 STRCON "a>b\n"
109 RPARENT )
109 SEMICO ;
110 RBRACE }
111 IFRW if
111 LPARENT (
111 IDENT a
111 LEQ <=
111 IDENT b
111 RPARENT )
111 LBRACE {
112 PRINTFRW printf
112 LPARENT (
112 STRCON "a<=b\n"
112 RPARENT )
112 SEMICO ;
113 RBRACE }
114 IFRW if
114 LPARENT (
114 IDENT a
114 GEQ >=
114 IDENT b
114 RPARENT )
114 LBRACE {
115 PRINTFRW printf
115 LPARENT (
115 STRCON "a>=b\n"
115 RPARENT )
115 SEMICO ;
116 RBRACE }
117 IFRW if
117 LPARENT (
117 IDENT a
117 EQ ==
117 IDENT b
117 RPARENT )
117 LBRACE {
118 PRINTFRW printf
118 LPARENT (
118 STRCON "a==b\n"
118 RPARENT )
118 SEMICO ;
119 RBRACE }
120 IFRW if
120 LPARENT (
120 IDENT a
120 NEQ !=
120 IDENT b
120 RPARENT )
120 LBRACE {
121 PRINTFRW printf
121 LPARENT (
121 STRCON "a!=b\n"
121 RPARENT )
121 SEMICO ;
122 RBRACE }
123 WHILERW while
123 LPARENT (
123 INTCON 1
123 RPARENT )
123 LBRACE {
124 IDENT value
124 ASSIGN =
124 IDENT value
124 MINUS -
124 INTCON 1
124 SEMICO ;
125 IFRW if
125 LPARENT (
125 IDENT value
125 LES <
125 INTCON 10
125 AND &&
125 IDENT add_g
125 LPARENT (
125 RPARENT )
125 RPARENT )
125 LBRACE {
126 SEMICO ;
127 RBRACE }
128 IFRW if
128 LPARENT (
128 IDENT value
128 LES <
128 INTCON 0
128 RPARENT )
128 LBRACE {
129 BREAKRW break
129 SEMICO ;
130 RBRACE }
130 ELSERW else
130 LBRACE {
131 CONTINUERW continue
131 SEMICO ;
132 RBRACE }
133 RBRACE }
134 IFRW if
134 LPARENT (
134 INTCON 1
134 OR ||
134 IDENT add_g
134 LPARENT (
134 RPARENT )
134 RPARENT )
134 LBRACE {
135 SEMICO ;
136 RBRACE }
137 PRINTFRW printf
137 LPARENT (
137 STRCON "g = %d\n"
137 COMMA ,
137 IDENT g
137 RPARENT )
137 SEMICO ;
138 IDENT value
138 ASSIGN =
138 INTCON 5
138 SEMICO ;
139 IDENT value
139 ASSIGN =
139 MINUS -
139 PLUS +
139 MINUS -
139 INTCON 5
139 SEMICO ;
140 IDENT value
140 ASSIGN =
140 LPARENT (
140 IDENT value
140 PLUS +
140 IDENT a
140 RPARENT )
140 MULT *
140 IDENT b
140 SEMICO ;
141 IDENT value
141 ASSIGN =
141 MINUS -
141 IDENT value
141 SEMICO ;
142 IDENT value
142 ASSIGN =
142 IDENT without_para
142 LPARENT (
142 RPARENT )
142 SEMICO ;
143 IDENT value
143 ASSIGN =
143 IDENT with_para_1
143 LPARENT (
143 IDENT value
143 RPARENT )
143 SEMICO ;
144 IDENT value
144 ASSIGN =
144 IDENT with_para_2
144 LPARENT (
144 IDENT a
144 COMMA ,
144 IDENT b
144 RPARENT )
144 SEMICO ;
146 IDENT array
146 LBRACK [
146 INTCON 2
146 MULT *
146 INTCON 2
146 MINUS -
146 INTCON 3
146 RBRACK ]
146 ASSIGN =
146 INTCON 1
146 SEMICO ;
147 IDENT array
147 LBRACK [
147 IDENT a
147 PLUS +
147 IDENT a
147 MINUS -
147 IDENT b
147 RBRACK ]
147 ASSIGN =
147 INTCON 0
147 SEMICO ;
148 IDENT with_array_para_1_void
148 LPARENT (
148 IDENT vcaa1
148 LBRACK [
148 INTCON 0
148 RBRACK ]
148 RPARENT )
148 SEMICO ;
149 IDENT with_array_para_2_void
149 LPARENT (
149 IDENT vcaa1
149 LBRACK [
149 INTCON 0
149 RBRACK ]
149 COMMA ,
149 IDENT vcaa2
149 LBRACK [
149 INTCON 0
149 RBRACK ]
149 RPARENT )
149 SEMICO ;
150 IDENT array
150 LBRACK [
150 INTCON 0
150 RBRACK ]
150 ASSIGN =
150 IDENT with_array_para_1
150 LPARENT (
150 IDENT va1
150 RPARENT )
150 SEMICO ;
151 IDENT array
151 LBRACK [
151 INTCON 0
151 RBRACK ]
151 ASSIGN =
151 IDENT with_array_para_2
151 LPARENT (
151 IDENT vca1
151 COMMA ,
151 IDENT vca2
151 RPARENT )
151 SEMICO ;
152 IDENT vaa1
152 LBRACK [
152 INTCON 0
152 RBRACK ]
152 LBRACK [
152 INTCON 0
152 RBRACK ]
152 ASSIGN =
152 INTCON 1
152 SEMICO ;
153 IDENT vaa1
153 LBRACK [
153 INTCON 0
153 RBRACK ]
153 LBRACK [
153 INTCON 0
153 RBRACK ]
153 ASSIGN =
153 IDENT with_double_array_para_1
153 LPARENT (
153 IDENT vcaa1
153 RPARENT )
153 SEMICO ;
154 IDENT vaa1
154 LBRACK [
154 INTCON 0
154 RBRACK ]
154 LBRACK [
154 INTCON 0
154 RBRACK ]
154 ASSIGN =
154 IDENT with_double_array_para_2
154 LPARENT (
154 IDENT vcaa1
154 COMMA ,
154 IDENT vcaa2
154 RPARENT )
154 SEMICO ;
155 IDENT value
155 ASSIGN =
155 LPARENT (
155 IDENT value
155 PLUS +
155 IDENT array
155 LBRACK [
155 INTCON 0
155 RBRACK ]
155 RPARENT )
155 MULT *
155 LPARENT (
155 IDENT array
155 LBRACK [
155 INTCON 1
155 RBRACK ]
155 MINUS -
155 IDENT vaa1
155 LBRACK [
155 INTCON 0
155 RBRACK ]
155 LBRACK [
155 INTCON 0
155 RBRACK ]
155 RPARENT )
155 DIV /
155 INTCON 2
155 SEMICO ;
156 PRINTFRW printf
156 LPARENT (
156 STRCON "value = %d\n"
156 COMMA ,
156 IDENT value
156 MOD %
156 INTCON 2
156 RPARENT )
156 SEMICO ;
158 RETURNRW return
158 INTCON 0
158 SEMICO ;
159 RBRACE }
