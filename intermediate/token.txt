INTTK int
IDENFR t
SEMICN ;
INTTK int
IDENFR writeElement
LPARENT (
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR findElement
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR element
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR x
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR f
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR x
RPARENT )
LBRACE {
IDENFR t
ASSIGN =
IDENFR findElement
LPARENT (
IDENFR a
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
IDENFR t
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR writeElement
LPARENT (
IDENFR a
COMMA ,
IDENFR x
MINU -
INTCON 1
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
IDENFR writeElement
LPARENT (
IDENFR a
COMMA ,
IDENFR x
MINU -
INTCON 2
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR x
MINU -
INTCON 2
RPARENT )
PLUS +
IDENFR f
LPARENT (
IDENFR a
COMMA ,
IDENFR x
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f
LPARENT (
IDENFR a
COMMA ,
INTCON 5
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
