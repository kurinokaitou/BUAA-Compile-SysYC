CONSTTK const
INTTK int
IDENFR c1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR cc1
ASSIGN =
INTCON 1
COMMA ,
IDENFR cc2
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ccc1
ASSIGN =
INTCON 1
COMMA ,
IDENFR ccc2
ASSIGN =
INTCON 1
COMMA ,
IDENFR ccc3
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ca1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR cca1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR cca2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR caa1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ccaa1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
COMMA ,
IDENFR ccaa2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR v1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR vc1
ASSIGN =
INTCON 1
COMMA ,
IDENFR vc2
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR vcc1
ASSIGN =
INTCON 1
COMMA ,
IDENFR vcc2
ASSIGN =
INTCON 1
COMMA ,
IDENFR vcc3
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR va1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR vca1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR vca2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR vaa1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR vcaa1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
COMMA ,
IDENFR vcaa2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR without_para
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 5
SEMICN ;
RBRACE }
INTTK int
IDENFR with_para_1
LPARENT (
INTTK int
IDENFR p
RPARENT )
LBRACE {
RETURNTK return
IDENFR p
MULT *
IDENFR p
SEMICN ;
RBRACE }
INTTK int
IDENFR with_para_2
LPARENT (
INTTK int
IDENFR p1
COMMA ,
INTTK int
IDENFR p2
RPARENT )
LBRACE {
RETURNTK return
IDENFR p1
MULT *
IDENFR p2
SEMICN ;
RBRACE }
INTTK int
IDENFR with_array_para_1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR with_array_para_2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR with_double_array_para_1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR with_double_array_para_2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR without_para_void
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR with_para_1_void
LPARENT (
INTTK int
IDENFR p
RPARENT )
LBRACE {
INTTK int
IDENFR p1
ASSIGN =
IDENFR p
MULT *
IDENFR p
SEMICN ;
RBRACE }
VOIDTK void
IDENFR with_para_2_void
LPARENT (
INTTK int
IDENFR p1
COMMA ,
INTTK int
IDENFR p2
RPARENT )
LBRACE {
INTTK int
IDENFR p
ASSIGN =
IDENFR p1
MULT *
IDENFR p2
SEMICN ;
RBRACE }
VOIDTK void
IDENFR with_array_para_1_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR p
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR with_array_para_2_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR p
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR with_double_array_para_1_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR p
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR with_double_array_para_2_void
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR p
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR add_g
LPARENT (
RPARENT )
LBRACE {
IDENFR g
ASSIGN =
IDENFR g
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
IDENFR g
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
ASSIGN =
INTCON 0
COMMA ,
IDENFR m
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR value
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373700\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
IDENFR n
MULT *
IDENFR m
SEMICN ;
IDENFR m
ASSIGN =
LPARENT (
IDENFR n
PLUS +
IDENFR m
RPARENT )
MULT *
IDENFR n
SEMICN ;
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "false\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "true\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "true\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "false\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a<b\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a>b\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a<=b\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a>=b\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a==b\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "a!=b\n"
RPARENT )
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IDENFR value
ASSIGN =
IDENFR value
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR value
LSS <
INTCON 10
AND &&
IDENFR add_g
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR value
LSS <
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR add_g
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "g = %d\n"
COMMA ,
IDENFR g
RPARENT )
SEMICN ;
IDENFR value
ASSIGN =
INTCON 5
SEMICN ;
IDENFR value
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 5
SEMICN ;
IDENFR value
ASSIGN =
LPARENT (
IDENFR value
PLUS +
IDENFR a
RPARENT )
MULT *
IDENFR b
SEMICN ;
IDENFR value
ASSIGN =
MINU -
IDENFR value
SEMICN ;
IDENFR value
ASSIGN =
IDENFR without_para
LPARENT (
RPARENT )
SEMICN ;
IDENFR value
ASSIGN =
IDENFR with_para_1
LPARENT (
IDENFR value
RPARENT )
SEMICN ;
IDENFR value
ASSIGN =
IDENFR with_para_2
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR array
LBRACK [
INTCON 2
MULT *
INTCON 2
MINU -
INTCON 3
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR array
LBRACK [
IDENFR a
PLUS +
IDENFR a
MINU -
IDENFR b
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR with_array_para_1_void
LPARENT (
IDENFR vcaa1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR with_array_para_2_void
LPARENT (
IDENFR vcaa1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR vcaa2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR with_array_para_1
LPARENT (
IDENFR va1
RPARENT )
SEMICN ;
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR with_array_para_2
LPARENT (
IDENFR vca1
COMMA ,
IDENFR vca2
RPARENT )
SEMICN ;
IDENFR vaa1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR vaa1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR with_double_array_para_1
LPARENT (
IDENFR vcaa1
RPARENT )
SEMICN ;
IDENFR vaa1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR with_double_array_para_2
LPARENT (
IDENFR vcaa1
COMMA ,
IDENFR vcaa2
RPARENT )
SEMICN ;
IDENFR value
ASSIGN =
LPARENT (
IDENFR value
PLUS +
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
MULT *
LPARENT (
IDENFR array
LBRACK [
INTCON 1
RBRACK ]
MINU -
IDENFR vaa1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
DIV /
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "value = %d\n"
COMMA ,
IDENFR value
MOD %
INTCON 2
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
