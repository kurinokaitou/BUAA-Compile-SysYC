CONSTTK const
INTTK int
IDENFR normal_const_1
ASSIGN =
INTCON 114514
SEMICN ;
CONSTTK const
INTTK int
IDENFR normal_const_2
ASSIGN =
INTCON 1919810
SEMICN ;
CONSTTK const
INTTK int
IDENFR normal_const_3
ASSIGN =
INTCON 18
COMMA ,
IDENFR normal_const_4
ASSIGN =
INTCON 37
COMMA ,
IDENFR normal_const_5
ASSIGN =
INTCON 51
COMMA ,
IDENFR normal_const_6
ASSIGN =
INTCON 82
SEMICN ;
CONSTTK const
INTTK int
IDENFR array_const_1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 114514
COMMA ,
INTCON 1919810
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR array_const_2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 18
COMMA ,
INTCON 37
RBRACE }
COMMA ,
LBRACE {
INTCON 51
COMMA ,
INTCON 82
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR normal_out_1
ASSIGN =
INTCON 114514
SEMICN ;
INTTK int
IDENFR normal_out_2
ASSIGN =
INTCON 415411
SEMICN ;
INTTK int
IDENFR normal_out_3
ASSIGN =
INTCON 18
COMMA ,
IDENFR normal_out_4
ASSIGN =
INTCON 37
COMMA ,
IDENFR normal_out_5
ASSIGN =
INTCON 51
COMMA ,
IDENFR normal_out_6
ASSIGN =
INTCON 82
SEMICN ;
INTTK int
IDENFR normal_out_7
SEMICN ;
INTTK int
IDENFR array_out_1
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR array_out_2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR array_out_3
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 81
COMMA ,
INTCON 73
COMMA ,
INTCON 15
COMMA ,
INTCON 28
RBRACE }
SEMICN ;
INTTK int
IDENFR array_out_4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 81
COMMA ,
INTCON 73
RBRACE }
COMMA ,
LBRACE {
INTCON 15
COMMA ,
INTCON 28
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR do_nothing
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR do_nothing_but_return
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR reverse_something
LPARENT (
INTTK int
IDENFR to_be_reversed
RPARENT )
LBRACE {
INTTK int
IDENFR reverse_finished
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
WHILETK while
LPARENT (
IDENFR to_be_reversed
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR reverse_finished
ASSIGN =
IDENFR reverse_finished
MULT *
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR to_be_reversed
MOD %
INTCON 10
SEMICN ;
IDENFR reverse_finished
ASSIGN =
IDENFR reverse_finished
PLUS +
IDENFR i
SEMICN ;
IDENFR to_be_reversed
ASSIGN =
IDENFR to_be_reversed
DIV /
INTCON 10
SEMICN ;
RBRACE }
RETURNTK return
IDENFR reverse_finished
SEMICN ;
RBRACE }
VOIDTK void
IDENFR reverse_all_and_printf
LPARENT (
INTTK int
IDENFR normal
COMMA ,
INTTK int
IDENFR array_1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR array_2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR reverse_something
LPARENT (
IDENFR normal
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 4
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR reverse_something
LPARENT (
IDENFR array_1
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
INTTK int
IDENFR m
ASSIGN =
INTCON 2
COMMA ,
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR m
GRE >
INTCON 0
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR n
LSS <
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR reverse_something
LPARENT (
IDENFR array_2
LBRACK [
INTCON 2
MINU -
IDENFR m
RBRACK ]
LBRACK [
IDENFR n
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
IDENFR n
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
MINU -
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR get_normal
SEMICN ;
IDENFR get_normal
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "18375182"
RPARENT )
SEMICN ;
INTTK int
IDENFR normal_1
SEMICN ;
INTTK int
IDENFR normal_2
SEMICN ;
INTTK int
IDENFR normal_3
SEMICN ;
INTTK int
IDENFR normal_4
SEMICN ;
INTTK int
IDENFR array_1
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR array_2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR normal_1
ASSIGN =
INTCON 18375182
SEMICN ;
IDENFR normal_2
ASSIGN =
IDENFR reverse_something
LPARENT (
IDENFR normal_out_2
RPARENT )
SEMICN ;
IDENFR normal_3
ASSIGN =
INTCON 0
SEMICN ;
IDENFR normal_4
ASSIGN =
INTCON 0
SEMICN ;
IDENFR array_1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 81
SEMICN ;
IDENFR array_1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 73
SEMICN ;
IDENFR array_1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 15
SEMICN ;
IDENFR array_1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
INTCON 28
SEMICN ;
IDENFR array_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 81
SEMICN ;
IDENFR array_2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 73
SEMICN ;
IDENFR array_2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 15
SEMICN ;
IDENFR array_2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 28
SEMICN ;
IDENFR reverse_all_and_printf
LPARENT (
IDENFR array_1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array_out_3
COMMA ,
IDENFR array_out_4
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
SEMICN ;
IDENFR normal_1
DIV /
IDENFR normal_2
SEMICN ;
IFTK if
LPARENT (
IDENFR normal_2
EQL ==
IDENFR normal_1
RPARENT )
LBRACE {
IDENFR normal_3
ASSIGN =
INTCON 189191
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR normal_3
ASSIGN =
INTCON 1919810
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR normal_3
NEQ !=
IDENFR normal_const_2
RPARENT )
LBRACE {
IDENFR normal_3
ASSIGN =
INTCON 189191
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR normal_3
GRE >
IDENFR normal_2
RPARENT )
LBRACE {
IDENFR normal_3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR normal_3
LSS <
IDENFR normal_2
RPARENT )
LBRACE {
IDENFR normal_3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR normal_3
GEQ >=
IDENFR normal_2
RPARENT )
LBRACE {
IDENFR normal_3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR normal_3
LEQ <=
IDENFR normal_2
RPARENT )
LBRACE {
IDENFR normal_3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR normal_4
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "18375182"
RPARENT )
SEMICN ;
RBRACE }
IDENFR normal_2
DIV /
IDENFR normal_3
SEMICN ;
IDENFR normal_3
MULT *
INTCON 2
SEMICN ;
IDENFR normal_2
MOD %
IDENFR normal_3
SEMICN ;
LPARENT (
IDENFR normal_2
MOD %
IDENFR normal_3
RPARENT )
PLUS +
INTCON 1
SEMICN ;
MINU -
PLUS +
IDENFR normal_3
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
