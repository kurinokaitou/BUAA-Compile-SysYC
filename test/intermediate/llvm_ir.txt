@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define dso_local i32 @getint() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %1)
  %3 = load i32, i32* %1, align 4
  ret i32 %3
}

declare dso_local i32 @__isoc99_scanf(i8*, ...) #1

define dso_local void @putint(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

define dso_local void @putstr(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %3)
  ret void
}

@count = global i32 0

@.str1 = constant [10 x i8] c"19231047\0a\00"
@.str2 = constant [11 x i8] c"climb 0 : \00"
@.str3 = constant [2 x i8] c"\0a\00"
@.str4 = constant [7 x i8] c"climb \00"
@.str5 = constant [4 x i8] c" : \00"
@.str6 = constant [2 x i8] c"\0a\00"
@.str7 = constant [7 x i8] c"climb \00"
@.str8 = constant [4 x i8] c" : \00"
@.str9 = constant [2 x i8] c"\0a\00"
@.str10 = constant [16 x i8] c"test return1 : \00"
@.str11 = constant [2 x i8] c"\0a\00"
@.str12 = constant [16 x i8] c"test climb sum \00"
@.str13 = constant [4 x i8] c" : \00"
@.str14 = constant [2 x i8] c"\0a\00"
@.str15 = constant [22 x i8] c"test product - sum : \00"
@.str16 = constant [2 x i8] c"\0a\00"
@.str17 = constant [15 x i8] c"test nest 1 : \00"
@.str18 = constant [2 x i8] c"\0a\00"
@.str19 = constant [15 x i8] c"test nest 2 : \00"
@.str20 = constant [2 x i8] c"\0a\00"
@.str21 = constant [10 x i8] c"test file\00"

define i32 @climbStairs(i32 %n) #0 {
_b0: ; preds = 
	%_t0 = alloca i32, align 4
	%_x1 = getelementptr inbounds i32, i32* %_t0, i32 0
	; store 2
	store i32 %n, i32* %_x1, align 4
	%_x3 = load i32, i32* %_x1, align 4
	%_t4 = icmp slt i32 %_x3, 0
	%_x5 = zext i1 %_t4 to i32
	; if %_x5 then _b1 else _b2
	%_t6 = icmp ne i32 %_x5, 0
	br i1 %_t6, label %_b1, label %_b2
_b1: ; preds = %_b0
	ret i32 0
_b2: ; preds = %_b0
	br label %_b3
_b3: ; preds = %_b2
	%_x7 = load i32, i32* %_x1, align 4
	%_t8 = icmp eq i32 %_x7, 0
	%_x9 = zext i1 %_t8 to i32
	; if %_x9 then _b4 else _b5
	%_t10 = icmp ne i32 %_x9, 0
	br i1 %_t10, label %_b4, label %_b5
_b4: ; preds = %_b3
	ret i32 1
_b5: ; preds = %_b3
	br label %_b6
_b6: ; preds = %_b5
	%_x11 = load i32, i32* %_x1, align 4
	%_t12 = icmp eq i32 %_x11, 1
	%_x13 = zext i1 %_t12 to i32
	; if %_x13 then _b7 else _b8
	%_t14 = icmp ne i32 %_x13, 0
	br i1 %_t14, label %_b7, label %_b8
_b7: ; preds = %_b6
	ret i32 1
_b8: ; preds = %_b6
	br label %_b9
_b9: ; preds = %_b8
	%_x15 = load i32, i32* %_x1, align 4
	%_x16 = sub i32 %_x15, 1
	%_x17 = call i32 @climbStairs(i32 %_x16)
	%_x18 = load i32, i32* %_x1, align 4
	%_x19 = sub i32 %_x18, 2
	%_x20 = call i32 @climbStairs(i32 %_x19)
	%_x21 = add i32 %_x17, %_x20
	ret i32 %_x21
}

define i32 @sum(i32 %a, i32 %b) #0 {
_b0: ; preds = 
	%_t0 = alloca i32, align 4
	%_x1 = getelementptr inbounds i32, i32* %_t0, i32 0
	; store 2
	store i32 %a, i32* %_x1, align 4
	%_t3 = alloca i32, align 4
	%_x4 = getelementptr inbounds i32, i32* %_t3, i32 0
	; store 5
	store i32 %b, i32* %_x4, align 4
	%_x6 = load i32, i32* %_x1, align 4
	%_x7 = load i32, i32* %_x4, align 4
	%_x8 = add i32 %_x6, %_x7
	ret i32 %_x8
}

define i32 @return1() #0 {
_b0: ; preds = 
	%_x0 = call i32 @sum(i32 2, i32 3)
	%_x1 = call i32 @sum(i32 4, i32 5)
	%_x2 = add i32 %_x0, %_x1
	ret i32 %_x2
}

define void @return2() #0 {
_b0: ; preds = 
	%_x0 = load i32, i32* @count, align 4
	%_x1 = add i32 %_x0, 3
	; store 2
	store i32 %_x1, i32* @count, align 4
	ret void
}

define i32 @SPAS(i32 %n) #0 {
_b0: ; preds = 
	%_t0 = alloca i32, align 4
	%_x1 = getelementptr inbounds i32, i32* %_t0, i32 0
	; store 2
	store i32 %n, i32* %_x1, align 4
	%_t3 = alloca i32, align 4
	%_x4 = getelementptr inbounds i32, i32* %_t3, i32 0
	; store 5
	store i32 1, i32* %_x4, align 4
	%_t6 = alloca i32, align 4
	%_x7 = getelementptr inbounds i32, i32* %_t6, i32 0
	; store 8
	store i32 0, i32* %_x7, align 4
	%_t9 = alloca i32, align 4
	%_x10 = getelementptr inbounds i32, i32* %_t9, i32 0
	br label %_b1
_b1: ; preds = %_b0, %_b2
	%_x11 = load i32, i32* %_x1, align 4
	%_t12 = icmp ne i32 %_x11, 0
	%_x13 = zext i1 %_t12 to i32
	; if %_x13 then _b2 else _b3
	%_t14 = icmp ne i32 %_x13, 0
	br i1 %_t14, label %_b2, label %_b3
_b2: ; preds = %_b1
	%_x15 = load i32, i32* %_x1, align 4
	%_x16 = srem i32 %_x15, 10
	; store 17
	store i32 %_x16, i32* %_x10, align 4
	%_x18 = load i32, i32* %_x1, align 4
	%_x19 = sdiv i32 %_x18, 10
	; store 20
	store i32 %_x19, i32* %_x1, align 4
	%_x21 = load i32, i32* %_x4, align 4
	%_x22 = load i32, i32* %_x10, align 4
	%_x23 = mul i32 %_x21, %_x22
	; store 24
	store i32 %_x23, i32* %_x4, align 4
	%_x25 = load i32, i32* %_x7, align 4
	%_x26 = load i32, i32* %_x10, align 4
	%_x27 = add i32 %_x25, %_x26
	; store 28
	store i32 %_x27, i32* %_x7, align 4
	br label %_b1
_b3: ; preds = %_b1
	%_x29 = load i32, i32* %_x4, align 4
	%_x30 = load i32, i32* %_x7, align 4
	%_x31 = sub i32 %_x29, %_x30
	ret i32 %_x31
}

define i32 @NOS(i32 %num) #0 {
_b0: ; preds = 
	%_t0 = alloca i32, align 4
	%_x1 = getelementptr inbounds i32, i32* %_t0, i32 0
	; store 2
	store i32 %num, i32* %_x1, align 4
	%_t3 = alloca i32, align 4
	%_x4 = getelementptr inbounds i32, i32* %_t3, i32 0
	; store 5
	store i32 0, i32* %_x4, align 4
	br label %_b1
_b1: ; preds = %_b0, %_b3, %_b8
	%_x6 = load i32, i32* %_x1, align 4
	%_t7 = icmp ne i32 %_x6, 0
	%_x8 = zext i1 %_t7 to i32
	; if %_x8 then _b2 else _b9
	%_t9 = icmp ne i32 %_x8, 0
	br i1 %_t9, label %_b2, label %_b9
_b2: ; preds = %_b1
	%_x10 = load i32, i32* %_x4, align 4
	%_x11 = add i32 %_x10, 1
	; store 12
	store i32 %_x11, i32* %_x4, align 4
	%_x13 = load i32, i32* %_x1, align 4
	%_x14 = srem i32 %_x13, 2
	%_t15 = icmp eq i32 %_x14, 1
	%_x16 = zext i1 %_t15 to i32
	; if %_x16 then _b3 else _b4
	%_t17 = icmp ne i32 %_x16, 0
	br i1 %_t17, label %_b3, label %_b4
_b3: ; preds = %_b2
	%_x18 = load i32, i32* %_x1, align 4
	%_x19 = sub i32 %_x18, 1
	; store 20
	store i32 %_x19, i32* %_x1, align 4
	br label %_b1
_b4: ; preds = %_b2
	br label %_b5
_b5: ; preds = %_b4
	%_x21 = load i32, i32* %_x1, align 4
	%_x22 = srem i32 %_x21, 2
	%_t23 = icmp ne i32 %_x22, 1
	%_x24 = zext i1 %_t23 to i32
	; if %_x24 then _b6 else _b7
	%_t25 = icmp ne i32 %_x24, 0
	br i1 %_t25, label %_b6, label %_b7
_b6: ; preds = %_b5
	%_x26 = load i32, i32* %_x1, align 4
	%_x27 = sdiv i32 %_x26, 2
	; store 28
	store i32 %_x27, i32* %_x1, align 4
	br label %_b8
_b7: ; preds = %_b5
	br label %_b8
_b8: ; preds = %_b6, %_b7
	br label %_b1
_b9: ; preds = %_b1
	%_x29 = load i32, i32* %_x4, align 4
	ret i32 %_x29
}

define i32 @main() #0 {
_b0: ; preds = 
	%_t0 = getelementptr inbounds [10 x i8], [10 x i8]* @.str1, i32 0, i32 0
	call void @putstr(i8* %_t0)
	%_x1 = load i32, i32* @count, align 4
	%_x2 = call i32 @climbStairs(i32 %_x1)
	%_t3 = getelementptr inbounds [11 x i8], [11 x i8]* @.str2, i32 0, i32 0
	call void @putstr(i8* %_t3)
	call void @putint(i32 %_x2)
	%_t4 = getelementptr inbounds [2 x i8], [2 x i8]* @.str3, i32 0, i32 0
	call void @putstr(i8* %_t4)
	call void @return2()
	%_x5 = load i32, i32* @count, align 4
	%_x6 = load i32, i32* @count, align 4
	%_x7 = call i32 @climbStairs(i32 %_x6)
	%_t8 = getelementptr inbounds [7 x i8], [7 x i8]* @.str4, i32 0, i32 0
	call void @putstr(i8* %_t8)
	call void @putint(i32 %_x5)
	%_t9 = getelementptr inbounds [4 x i8], [4 x i8]* @.str5, i32 0, i32 0
	call void @putstr(i8* %_t9)
	call void @putint(i32 %_x7)
	%_t10 = getelementptr inbounds [2 x i8], [2 x i8]* @.str6, i32 0, i32 0
	call void @putstr(i8* %_t10)
	call void @return2()
	%_x11 = load i32, i32* @count, align 4
	%_x12 = load i32, i32* @count, align 4
	%_x13 = call i32 @climbStairs(i32 %_x12)
	%_t14 = getelementptr inbounds [7 x i8], [7 x i8]* @.str7, i32 0, i32 0
	call void @putstr(i8* %_t14)
	call void @putint(i32 %_x11)
	%_t15 = getelementptr inbounds [4 x i8], [4 x i8]* @.str8, i32 0, i32 0
	call void @putstr(i8* %_t15)
	call void @putint(i32 %_x13)
	%_t16 = getelementptr inbounds [2 x i8], [2 x i8]* @.str9, i32 0, i32 0
	call void @putstr(i8* %_t16)
	%_x17 = call i32 @return1()
	%_t18 = alloca i32, align 4
	%_x19 = getelementptr inbounds i32, i32* %_t18, i32 0
	; store 20
	store i32 %_x17, i32* %_x19, align 4
	%_x21 = load i32, i32* %_x19, align 4
	%_t22 = getelementptr inbounds [16 x i8], [16 x i8]* @.str10, i32 0, i32 0
	call void @putstr(i8* %_t22)
	call void @putint(i32 %_x21)
	%_t23 = getelementptr inbounds [2 x i8], [2 x i8]* @.str11, i32 0, i32 0
	call void @putstr(i8* %_t23)
	%_x24 = call i32 @sum(i32 3, i32 4)
	%_x25 = call i32 @sum(i32 3, i32 4)
	%_x26 = call i32 @climbStairs(i32 %_x25)
	%_t27 = getelementptr inbounds [16 x i8], [16 x i8]* @.str12, i32 0, i32 0
	call void @putstr(i8* %_t27)
	call void @putint(i32 %_x24)
	%_t28 = getelementptr inbounds [4 x i8], [4 x i8]* @.str13, i32 0, i32 0
	call void @putstr(i8* %_t28)
	call void @putint(i32 %_x26)
	%_t29 = getelementptr inbounds [2 x i8], [2 x i8]* @.str14, i32 0, i32 0
	call void @putstr(i8* %_t29)
	%_x30 = call i32 @SPAS(i32 1345121324)
	%_t31 = getelementptr inbounds [22 x i8], [22 x i8]* @.str15, i32 0, i32 0
	call void @putstr(i8* %_t31)
	call void @putint(i32 %_x30)
	%_t32 = getelementptr inbounds [2 x i8], [2 x i8]* @.str16, i32 0, i32 0
	call void @putstr(i8* %_t32)
	%_x33 = call i32 @SPAS(i32 34)
	%_x34 = call i32 @SPAS(i32 32)
	%_x35 = call i32 @sum(i32 %_x33, i32 %_x34)
	%_x36 = call i32 @climbStairs(i32 %_x35)
	%_t37 = getelementptr inbounds [15 x i8], [15 x i8]* @.str17, i32 0, i32 0
	call void @putstr(i8* %_t37)
	call void @putint(i32 %_x36)
	%_t38 = getelementptr inbounds [2 x i8], [2 x i8]* @.str18, i32 0, i32 0
	call void @putstr(i8* %_t38)
	%_x39 = call i32 @NOS(i32 14)
	%_x40 = call i32 @NOS(i32 6)
	%_x41 = call i32 @sum(i32 %_x39, i32 %_x40)
	%_x42 = call i32 @climbStairs(i32 %_x41)
	%_t43 = getelementptr inbounds [15 x i8], [15 x i8]* @.str19, i32 0, i32 0
	call void @putstr(i8* %_t43)
	call void @putint(i32 %_x42)
	%_t44 = getelementptr inbounds [2 x i8], [2 x i8]* @.str20, i32 0, i32 0
	call void @putstr(i8* %_t44)
	%_t45 = getelementptr inbounds [10 x i8], [10 x i8]* @.str21, i32 0, i32 0
	call void @putstr(i8* %_t45)
	ret i32 0
}

