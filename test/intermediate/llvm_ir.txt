@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define dso_local i32 @getint() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* %1)
  %3 = load i32, i32* %1, align 4
  ret i32 %3
}

declare dso_local i32 @__isoc99_scanf(i8*, ...) #1

define dso_local void @putint(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

define dso_local void @putstr(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* %3)
  ret void
}

@SIZE = constant i32 1000
@qpow_MOD = constant i32 10089
@arr = global [1002 x i32] zeroinitializer
@temp = global [1002 x i32] zeroinitializer

@.str1 = constant [10 x i8] c"20373649\0a\00"
@.str2 = constant [33 x i8] c"The hash of the sorted array is \00"
@.str3 = constant [3 x i8] c".\0a\00"
@.str4 = constant [29 x i8] c"The answer of quick_pow is: \00"
@.str5 = constant [2 x i8] c" \00"
@.str6 = constant [2 x i8] c" \00"
@.str7 = constant [2 x i8] c" \00"
@.str8 = constant [3 x i8] c".\0a\00"
@.str9 = constant [28 x i8] c"a < b and b < c are equal.\0a\00"
@.str10 = constant [21 x i8] c"The num I input is: \00"
@.str11 = constant [2 x i8] c"\0a\00"
@.str12 = constant [34 x i8] c"After a complex calculation: d = \00"
@.str13 = constant [2 x i8] c"\0a\00"

define void @divide_and_conquer_sort(i32 %n, i32 * %a, i32 %s) #0 {
_b0: ; preds = 
	; getelementptr 0
	%_x0 = getelementptr inbounds [1002 x i32], [1002 x i32]* @arr, i32 0, i32 0
	; getelementptr 1
	%_x1 = getelementptr inbounds [1002 x i32], [1002 x i32]* @temp, i32 0, i32 0
	%_t2 = alloca i32, align 4
	%_x3 = getelementptr inbounds i32, i32* %_t2, i32 0
	; store 4
	store i32 %n, i32* %_x3, align 4
	%_t5 = alloca i32, align 4
	%_x6 = getelementptr inbounds i32, i32* %_t5, i32 0
	; store 7
	store i32 %s, i32* %_x6, align 4
	%_x8 = load i32, i32* %_x3, align 4
	%_t9 = icmp eq i32 %_x8, 1
	%_x10 = zext i1 %_t9 to i32
	; if %_x10 then _b1 else _b2
	%_t11 = icmp ne i32 %_x10, 0
	br i1 %_t11, label %_b1, label %_b2
_b1: ; preds = %_b0
	ret void
_b2: ; preds = %_b0
	%_x12 = load i32, i32* %_x3, align 4
	%_t13 = icmp eq i32 %_x12, 2
	%_x14 = zext i1 %_t13 to i32
	; if %_x14 then _b3 else _b7
	%_t15 = icmp ne i32 %_x14, 0
	br i1 %_t15, label %_b3, label %_b7
_b3: ; preds = %_b2
	%_x16 = load i32, i32* %_x6, align 4
	%_x17 = add i32 %_x16, 0
	; getelementptr 18
	%_t19 = mul i32 %_x17, 1
	%_x18 = getelementptr inbounds i32, i32* %a, i32 %_t19
	%_x20 = load i32, i32* %_x18, align 4
	%_x21 = load i32, i32* %_x6, align 4
	%_x22 = add i32 %_x21, 1
	; getelementptr 23
	%_t24 = mul i32 %_x22, 1
	%_x23 = getelementptr inbounds i32, i32* %a, i32 %_t24
	%_x25 = load i32, i32* %_x23, align 4
	%_t26 = icmp sgt i32 %_x20, %_x25
	%_x27 = zext i1 %_t26 to i32
	; if %_x27 then _b4 else _b5
	%_t28 = icmp ne i32 %_x27, 0
	br i1 %_t28, label %_b4, label %_b5
_b4: ; preds = %_b3
	%_x29 = load i32, i32* %_x6, align 4
	%_x30 = add i32 %_x29, 0
	; getelementptr 31
	%_t32 = mul i32 %_x30, 1
	%_x31 = getelementptr inbounds i32, i32* %a, i32 %_t32
	%_x33 = load i32, i32* %_x31, align 4
	%_t34 = alloca i32, align 4
	%_x35 = getelementptr inbounds i32, i32* %_t34, i32 0
	; store 36
	store i32 %_x33, i32* %_x35, align 4
	%_x37 = load i32, i32* %_x6, align 4
	%_x38 = add i32 %_x37, 0
	; getelementptr 39
	%_t40 = mul i32 %_x38, 1
	%_x39 = getelementptr inbounds i32, i32* %a, i32 %_t40
	%_x41 = load i32, i32* %_x6, align 4
	%_x42 = add i32 %_x41, 1
	; getelementptr 43
	%_t44 = mul i32 %_x42, 1
	%_x43 = getelementptr inbounds i32, i32* %a, i32 %_t44
	%_x45 = load i32, i32* %_x43, align 4
	; store 46
	store i32 %_x45, i32* %_x39, align 4
	%_x47 = load i32, i32* %_x6, align 4
	%_x48 = add i32 %_x47, 1
	; getelementptr 49
	%_t50 = mul i32 %_x48, 1
	%_x49 = getelementptr inbounds i32, i32* %a, i32 %_t50
	%_x51 = load i32, i32* %_x35, align 4
	; store 52
	store i32 %_x51, i32* %_x49, align 4
	br label %_b6
_b5: ; preds = %_b3
	br label %_b6
_b6: ; preds = %_b4, %_b5
	br label %_b29
_b7: ; preds = %_b2
	%_x53 = load i32, i32* %_x3, align 4
	%_x54 = sdiv i32 %_x53, 2
	%_t55 = alloca i32, align 4
	%_x56 = getelementptr inbounds i32, i32* %_t55, i32 0
	; store 57
	store i32 %_x54, i32* %_x56, align 4
	%_x58 = load i32, i32* %_x3, align 4
	%_x59 = load i32, i32* %_x56, align 4
	%_x60 = sub i32 %_x58, %_x59
	%_t61 = alloca i32, align 4
	%_x62 = getelementptr inbounds i32, i32* %_t61, i32 0
	; store 63
	store i32 %_x60, i32* %_x62, align 4
	%_x64 = load i32, i32* %_x56, align 4
	; getelementptr 65
	%_x65 = getelementptr inbounds i32, i32* %a, i32 0
	%_x66 = load i32, i32* %_x6, align 4
	call void @divide_and_conquer_sort(i32 %_x64, i32 * %_x65, i32 %_x66)
	%_x67 = load i32, i32* %_x62, align 4
	; getelementptr 68
	%_x68 = getelementptr inbounds i32, i32* %a, i32 0
	%_x69 = load i32, i32* %_x6, align 4
	%_x70 = load i32, i32* %_x56, align 4
	%_x71 = add i32 %_x69, %_x70
	call void @divide_and_conquer_sort(i32 %_x67, i32 * %_x68, i32 %_x71)
	%_t72 = alloca i32, align 4
	%_x73 = getelementptr inbounds i32, i32* %_t72, i32 0
	; store 74
	store i32 0, i32* %_x73, align 4
	%_t75 = alloca i32, align 4
	%_x76 = getelementptr inbounds i32, i32* %_t75, i32 0
	; store 77
	store i32 0, i32* %_x76, align 4
	%_t78 = alloca i32, align 4
	%_x79 = getelementptr inbounds i32, i32* %_t78, i32 0
	; store 80
	store i32 0, i32* %_x79, align 4
	%_x81 = load i32, i32* %_x6, align 4
	%_x82 = load i32, i32* %_x56, align 4
	%_x83 = add i32 %_x81, %_x82
	%_t84 = alloca i32, align 4
	%_x85 = getelementptr inbounds i32, i32* %_t84, i32 0
	; store 86
	store i32 %_x83, i32* %_x85, align 4
	br label %_b8
_b8: ; preds = %_b7, %_b24
	; if 1 then _b9 else _b25
	%_t87 = icmp ne i32 1, 0
	br i1 %_t87, label %_b9, label %_b25
_b9: ; preds = %_b8
	%_x88 = load i32, i32* %_x76, align 4
	%_x89 = load i32, i32* %_x56, align 4
	%_x90 = sub i32 %_x89, 1
	%_t91 = icmp eq i32 %_x88, %_x90
	%_x92 = zext i1 %_t91 to i32
	; if %_x92 then _b10 else _b14
	%_t93 = icmp ne i32 %_x92, 0
	br i1 %_t93, label %_b10, label %_b14
_b10: ; preds = %_b9
	%_x94 = load i32, i32* %_x79, align 4
	%_x95 = load i32, i32* %_x62, align 4
	%_x96 = sub i32 %_x95, 1
	%_t97 = icmp eq i32 %_x94, %_x96
	%_x98 = zext i1 %_t97 to i32
	; if %_x98 then _b11 else _b12
	%_t99 = icmp ne i32 %_x98, 0
	br i1 %_t99, label %_b11, label %_b12
_b11: ; preds = %_b10
	br label %_b25
_b12: ; preds = %_b10
	br label %_b13
_b13: ; preds = %_b12
	br label %_b15
_b14: ; preds = %_b9
	br label %_b15
_b15: ; preds = %_b13, %_b14
	%_x100 = load i32, i32* %_x76, align 4
	%_x101 = load i32, i32* %_x56, align 4
	%_x102 = sub i32 %_x101, 1
	%_t103 = icmp eq i32 %_x100, %_x102
	%_x104 = zext i1 %_t103 to i32
	; if %_x104 then _b16 else _b17
	%_t105 = icmp ne i32 %_x104, 0
	br i1 %_t105, label %_b16, label %_b17
_b16: ; preds = %_b15
	%_x106 = load i32, i32* %_x73, align 4
	; getelementptr 107
	%_t108 = mul i32 %_x106, 1
	%_x107 = getelementptr inbounds i32, i32* %_x1, i32 %_t108
	%_x109 = load i32, i32* %_x85, align 4
	%_x110 = load i32, i32* %_x79, align 4
	%_x111 = add i32 %_x109, %_x110
	; getelementptr 112
	%_t113 = mul i32 %_x111, 1
	%_x112 = getelementptr inbounds i32, i32* %a, i32 %_t113
	%_x114 = load i32, i32* %_x112, align 4
	; store 115
	store i32 %_x114, i32* %_x107, align 4
	%_x116 = load i32, i32* %_x73, align 4
	%_x117 = add i32 %_x116, 1
	; store 118
	store i32 %_x117, i32* %_x73, align 4
	%_x119 = load i32, i32* %_x79, align 4
	%_x120 = add i32 %_x119, 1
	; store 121
	store i32 %_x120, i32* %_x79, align 4
	br label %_b24
_b17: ; preds = %_b15
	%_x122 = load i32, i32* %_x79, align 4
	%_x123 = load i32, i32* %_x62, align 4
	%_x124 = sub i32 %_x123, 1
	%_t125 = icmp eq i32 %_x122, %_x124
	%_x126 = zext i1 %_t125 to i32
	; if %_x126 then _b18 else _b19
	%_t127 = icmp ne i32 %_x126, 0
	br i1 %_t127, label %_b18, label %_b19
_b18: ; preds = %_b17
	%_x128 = load i32, i32* %_x73, align 4
	; getelementptr 129
	%_t130 = mul i32 %_x128, 1
	%_x129 = getelementptr inbounds i32, i32* %_x1, i32 %_t130
	%_x131 = load i32, i32* %_x6, align 4
	%_x132 = load i32, i32* %_x76, align 4
	%_x133 = add i32 %_x131, %_x132
	; getelementptr 134
	%_t135 = mul i32 %_x133, 1
	%_x134 = getelementptr inbounds i32, i32* %a, i32 %_t135
	%_x136 = load i32, i32* %_x134, align 4
	; store 137
	store i32 %_x136, i32* %_x129, align 4
	%_x138 = load i32, i32* %_x73, align 4
	%_x139 = add i32 %_x138, 1
	; store 140
	store i32 %_x139, i32* %_x73, align 4
	%_x141 = load i32, i32* %_x76, align 4
	%_x142 = add i32 %_x141, 1
	; store 143
	store i32 %_x142, i32* %_x76, align 4
	br label %_b23
_b19: ; preds = %_b17
	%_x144 = load i32, i32* %_x6, align 4
	%_x145 = load i32, i32* %_x76, align 4
	%_x146 = add i32 %_x144, %_x145
	; getelementptr 147
	%_t148 = mul i32 %_x146, 1
	%_x147 = getelementptr inbounds i32, i32* %a, i32 %_t148
	%_x149 = load i32, i32* %_x147, align 4
	%_x150 = load i32, i32* %_x85, align 4
	%_x151 = load i32, i32* %_x79, align 4
	%_x152 = add i32 %_x150, %_x151
	; getelementptr 153
	%_t154 = mul i32 %_x152, 1
	%_x153 = getelementptr inbounds i32, i32* %a, i32 %_t154
	%_x155 = load i32, i32* %_x153, align 4
	%_t156 = icmp slt i32 %_x149, %_x155
	%_x157 = zext i1 %_t156 to i32
	; if %_x157 then _b20 else _b21
	%_t158 = icmp ne i32 %_x157, 0
	br i1 %_t158, label %_b20, label %_b21
_b20: ; preds = %_b19
	%_x159 = load i32, i32* %_x73, align 4
	; getelementptr 160
	%_t161 = mul i32 %_x159, 1
	%_x160 = getelementptr inbounds i32, i32* %_x1, i32 %_t161
	%_x162 = load i32, i32* %_x6, align 4
	%_x163 = load i32, i32* %_x76, align 4
	%_x164 = add i32 %_x162, %_x163
	; getelementptr 165
	%_t166 = mul i32 %_x164, 1
	%_x165 = getelementptr inbounds i32, i32* %a, i32 %_t166
	%_x167 = load i32, i32* %_x165, align 4
	; store 168
	store i32 %_x167, i32* %_x160, align 4
	%_x169 = load i32, i32* %_x73, align 4
	%_x170 = add i32 %_x169, 1
	; store 171
	store i32 %_x170, i32* %_x73, align 4
	%_x172 = load i32, i32* %_x76, align 4
	%_x173 = add i32 %_x172, 1
	; store 174
	store i32 %_x173, i32* %_x76, align 4
	br label %_b22
_b21: ; preds = %_b19
	%_x175 = load i32, i32* %_x73, align 4
	; getelementptr 176
	%_t177 = mul i32 %_x175, 1
	%_x176 = getelementptr inbounds i32, i32* %_x1, i32 %_t177
	%_x178 = load i32, i32* %_x85, align 4
	%_x179 = load i32, i32* %_x79, align 4
	%_x180 = add i32 %_x178, %_x179
	; getelementptr 181
	%_t182 = mul i32 %_x180, 1
	%_x181 = getelementptr inbounds i32, i32* %a, i32 %_t182
	%_x183 = load i32, i32* %_x181, align 4
	; store 184
	store i32 %_x183, i32* %_x176, align 4
	%_x185 = load i32, i32* %_x73, align 4
	%_x186 = add i32 %_x185, 1
	; store 187
	store i32 %_x186, i32* %_x73, align 4
	%_x188 = load i32, i32* %_x79, align 4
	%_x189 = add i32 %_x188, 1
	; store 190
	store i32 %_x189, i32* %_x79, align 4
	br label %_b22
_b22: ; preds = %_b20, %_b21
	br label %_b23
_b23: ; preds = %_b18, %_b22
	br label %_b24
_b24: ; preds = %_b16, %_b23
	br label %_b8
_b25: ; preds = %_b8, %_b11
	%_t191 = alloca i32, align 4
	%_x192 = getelementptr inbounds i32, i32* %_t191, i32 0
	; store 193
	store i32 0, i32* %_x192, align 4
	br label %_b26
_b26: ; preds = %_b25, %_b27
	%_x194 = load i32, i32* %_x192, align 4
	%_x195 = load i32, i32* %_x3, align 4
	%_t196 = icmp ne i32 %_x194, %_x195
	%_x197 = zext i1 %_t196 to i32
	; if %_x197 then _b27 else _b28
	%_t198 = icmp ne i32 %_x197, 0
	br i1 %_t198, label %_b27, label %_b28
_b27: ; preds = %_b26
	%_x199 = load i32, i32* %_x6, align 4
	%_x200 = load i32, i32* %_x192, align 4
	%_x201 = add i32 %_x199, %_x200
	; getelementptr 202
	%_t203 = mul i32 %_x201, 1
	%_x202 = getelementptr inbounds i32, i32* %a, i32 %_t203
	%_x204 = load i32, i32* %_x192, align 4
	; getelementptr 205
	%_t206 = mul i32 %_x204, 1
	%_x205 = getelementptr inbounds i32, i32* %_x1, i32 %_t206
	%_x207 = load i32, i32* %_x205, align 4
	; store 208
	store i32 %_x207, i32* %_x202, align 4
	%_x209 = load i32, i32* %_x192, align 4
	%_x210 = add i32 %_x209, 1
	; store 211
	store i32 %_x210, i32* %_x192, align 4
	br label %_b26
_b28: ; preds = %_b26
	br label %_b29
_b29: ; preds = %_b6, %_b28
	br label %_b30
_b30: ; preds = %_b29
	ret void
}

define i32 @quick_pow(i32 %a, i32 %p, i32 %mod) #0 {
_b0: ; preds = 
	; getelementptr 0
	%_x0 = getelementptr inbounds [1002 x i32], [1002 x i32]* @arr, i32 0, i32 0
	; getelementptr 1
	%_x1 = getelementptr inbounds [1002 x i32], [1002 x i32]* @temp, i32 0, i32 0
	%_t2 = alloca i32, align 4
	%_x3 = getelementptr inbounds i32, i32* %_t2, i32 0
	; store 4
	store i32 %a, i32* %_x3, align 4
	%_t5 = alloca i32, align 4
	%_x6 = getelementptr inbounds i32, i32* %_t5, i32 0
	; store 7
	store i32 %p, i32* %_x6, align 4
	%_t8 = alloca i32, align 4
	%_x9 = getelementptr inbounds i32, i32* %_t8, i32 0
	; store 10
	store i32 %mod, i32* %_x9, align 4
	%_x11 = load i32, i32* %_x6, align 4
	%_t12 = alloca i32, align 4
	%_x13 = getelementptr inbounds i32, i32* %_t12, i32 0
	; store 14
	store i32 %_x11, i32* %_x13, align 4
	%_x15 = load i32, i32* %_x3, align 4
	%_t16 = alloca i32, align 4
	%_x17 = getelementptr inbounds i32, i32* %_t16, i32 0
	; store 18
	store i32 %_x15, i32* %_x17, align 4
	%_t19 = alloca i32, align 4
	%_x20 = getelementptr inbounds i32, i32* %_t19, i32 0
	; store 21
	store i32 1, i32* %_x20, align 4
	br label %_b1
_b1: ; preds = %_b0, %_b5
	%_x22 = load i32, i32* %_x13, align 4
	%_t23 = icmp ne i32 %_x22, 0
	%_x24 = zext i1 %_t23 to i32
	; if %_x24 then _b2 else _b6
	%_t25 = icmp ne i32 %_x24, 0
	br i1 %_t25, label %_b2, label %_b6
_b2: ; preds = %_b1
	%_x26 = load i32, i32* %_x13, align 4
	%_x27 = srem i32 %_x26, 2
	%_t28 = icmp eq i32 %_x27, 1
	%_x29 = zext i1 %_t28 to i32
	; if %_x29 then _b3 else _b4
	%_t30 = icmp ne i32 %_x29, 0
	br i1 %_t30, label %_b3, label %_b4
_b3: ; preds = %_b2
	%_x31 = load i32, i32* %_x20, align 4
	%_x32 = load i32, i32* %_x17, align 4
	%_x33 = mul i32 %_x31, %_x32
	%_x34 = load i32, i32* %_x9, align 4
	%_x35 = srem i32 %_x33, %_x34
	; store 36
	store i32 %_x35, i32* %_x20, align 4
	br label %_b5
_b4: ; preds = %_b2
	br label %_b5
_b5: ; preds = %_b3, %_b4
	%_x37 = load i32, i32* %_x17, align 4
	%_x38 = load i32, i32* %_x17, align 4
	%_x39 = mul i32 %_x37, %_x38
	%_x40 = load i32, i32* %_x9, align 4
	%_x41 = srem i32 %_x39, %_x40
	; store 42
	store i32 %_x41, i32* %_x17, align 4
	%_x43 = load i32, i32* %_x13, align 4
	%_x44 = sdiv i32 %_x43, 2
	; store 45
	store i32 %_x44, i32* %_x13, align 4
	br label %_b1
_b6: ; preds = %_b1
	%_x46 = load i32, i32* %_x20, align 4
	ret i32 %_x46
}

define i32 @hash(i32 %n, i32 * %a) #0 {
_b0: ; preds = 
	; getelementptr 0
	%_x0 = getelementptr inbounds [1002 x i32], [1002 x i32]* @arr, i32 0, i32 0
	; getelementptr 1
	%_x1 = getelementptr inbounds [1002 x i32], [1002 x i32]* @temp, i32 0, i32 0
	%_t2 = alloca i32, align 4
	%_x3 = getelementptr inbounds i32, i32* %_t2, i32 0
	; store 4
	store i32 %n, i32* %_x3, align 4
	%_t5 = alloca i32, align 4
	%_x6 = getelementptr inbounds i32, i32* %_t5, i32 0
	; store 7
	store i32 53, i32* %_x6, align 4
	%_t8 = alloca i32, align 4
	%_x9 = getelementptr inbounds i32, i32* %_t8, i32 0
	; store 10
	store i32 9999973, i32* %_x9, align 4
	%_t11 = alloca i32, align 4
	%_x12 = getelementptr inbounds i32, i32* %_t11, i32 0
	; store 13
	store i32 0, i32* %_x12, align 4
	%_t14 = alloca i32, align 4
	%_x15 = getelementptr inbounds i32, i32* %_t14, i32 0
	; store 16
	store i32 0, i32* %_x15, align 4
	br label %_b1
_b1: ; preds = %_b0, %_b2
	%_x17 = load i32, i32* %_x15, align 4
	%_x18 = load i32, i32* %_x3, align 4
	%_t19 = icmp ne i32 %_x17, %_x18
	%_x20 = zext i1 %_t19 to i32
	; if %_x20 then _b2 else _b3
	%_t21 = icmp ne i32 %_x20, 0
	br i1 %_t21, label %_b2, label %_b3
_b2: ; preds = %_b1
	%_x22 = load i32, i32* %_x12, align 4
	%_x23 = mul i32 %_x22, 53
	%_x24 = load i32, i32* %_x15, align 4
	; getelementptr 25
	%_t26 = mul i32 %_x24, 1
	%_x25 = getelementptr inbounds i32, i32* %a, i32 %_t26
	%_x27 = load i32, i32* %_x25, align 4
	%_x28 = add i32 %_x23, %_x27
	%_x29 = srem i32 %_x28, 9999973
	; store 30
	store i32 %_x29, i32* %_x12, align 4
	%_x31 = load i32, i32* %_x15, align 4
	%_x32 = add i32 %_x31, 1
	; store 33
	store i32 %_x32, i32* %_x15, align 4
	br label %_b1
_b3: ; preds = %_b1
	%_x34 = load i32, i32* %_x12, align 4
	ret i32 %_x34
}

define i32 @main() #0 {
_b0: ; preds = 
	; getelementptr 0
	%_x0 = getelementptr inbounds [1002 x i32], [1002 x i32]* @arr, i32 0, i32 0
	; getelementptr 1
	%_x1 = getelementptr inbounds [1002 x i32], [1002 x i32]* @temp, i32 0, i32 0
	%_t2 = getelementptr inbounds [10 x i8], [10 x i8]* @.str1, i32 0, i32 0
	call void @putstr(i8* %_t2)
	%_t3 = alloca i32, align 4
	%_x4 = getelementptr inbounds i32, i32* %_t3, i32 0
	; store 5
	store i32 0, i32* %_x4, align 4
	br label %_b1
_b1: ; preds = %_b0, %_b5
	%_x6 = load i32, i32* %_x4, align 4
	%_t7 = icmp ne i32 %_x6, 5
	%_x8 = zext i1 %_t7 to i32
	; if %_x8 then _b2 else _b6
	%_t9 = icmp ne i32 %_x8, 0
	br i1 %_t9, label %_b2, label %_b6
_b2: ; preds = %_b1
	%_t10 = alloca i32, align 4
	%_x11 = getelementptr inbounds i32, i32* %_t10, i32 0
	%_x12 = call i32 @getint()
	; store 13
	store i32 %_x12, i32* %_x11, align 4
	%_t14 = alloca i32, align 4
	%_x15 = getelementptr inbounds i32, i32* %_t14, i32 0
	; store 16
	store i32 0, i32* %_x15, align 4
	br label %_b3
_b3: ; preds = %_b2, %_b4
	%_x17 = load i32, i32* %_x15, align 4
	%_x18 = load i32, i32* %_x11, align 4
	%_t19 = icmp ne i32 %_x17, %_x18
	%_x20 = zext i1 %_t19 to i32
	; if %_x20 then _b4 else _b5
	%_t21 = icmp ne i32 %_x20, 0
	br i1 %_t21, label %_b4, label %_b5
_b4: ; preds = %_b3
	%_x22 = load i32, i32* %_x15, align 4
	; getelementptr 23
	%_t24 = mul i32 %_x22, 1
	%_x23 = getelementptr inbounds i32, i32* %_x0, i32 %_t24
	%_x25 = call i32 @getint()
	; store 26
	store i32 %_x25, i32* %_x23, align 4
	%_x27 = load i32, i32* %_x15, align 4
	%_x28 = add i32 %_x27, 1
	; store 29
	store i32 %_x28, i32* %_x15, align 4
	br label %_b3
_b5: ; preds = %_b3
	%_x30 = load i32, i32* %_x11, align 4
	; getelementptr 31
	%_x31 = getelementptr inbounds i32, i32* %_x0, i32 0
	call void @divide_and_conquer_sort(i32 %_x30, i32 * %_x31, i32 0)
	%_x32 = load i32, i32* %_x11, align 4
	; getelementptr 33
	%_x33 = getelementptr inbounds i32, i32* %_x0, i32 0
	%_x34 = call i32 @hash(i32 %_x32, i32 * %_x33)
	%_t35 = getelementptr inbounds [33 x i8], [33 x i8]* @.str2, i32 0, i32 0
	call void @putstr(i8* %_t35)
	call void @putint(i32 %_x34)
	%_t36 = getelementptr inbounds [3 x i8], [3 x i8]* @.str3, i32 0, i32 0
	call void @putstr(i8* %_t36)
	%_x37 = load i32, i32* %_x4, align 4
	%_x38 = add i32 %_x37, 1
	; store 39
	store i32 %_x38, i32* %_x4, align 4
	br label %_b1
_b6: ; preds = %_b1
	%_t40 = alloca [4 x i32], align 4
	%_x41 = getelementptr inbounds [4 x i32], [4 x i32]* %_t40, i32 0, i32 0
	; getelementptr 42
	%_x42 = getelementptr inbounds i32, i32* %_x41, i32 0
	%_x43 = call i32 @quick_pow(i32 34, i32 89, i32 10089)
	; store 44
	store i32 %_x43, i32* %_x42, align 4
	; getelementptr 45
	%_x45 = getelementptr inbounds i32, i32* %_x41, i32 1
	%_x46 = call i32 @quick_pow(i32 59, i32 122, i32 10089)
	; store 47
	store i32 %_x46, i32* %_x45, align 4
	; getelementptr 48
	%_x48 = getelementptr inbounds i32, i32* %_x41, i32 2
	%_x49 = call i32 @quick_pow(i32 13, i32 3444, i32 10089)
	; store 50
	store i32 %_x49, i32* %_x48, align 4
	; getelementptr 51
	%_x51 = getelementptr inbounds i32, i32* %_x41, i32 3
	%_x52 = call i32 @quick_pow(i32 11, i32 987, i32 10089)
	; store 53
	store i32 %_x52, i32* %_x51, align 4
	; getelementptr 54
	%_x54 = getelementptr inbounds i32, i32* %_x41, i32 0
	%_x55 = load i32, i32* %_x54, align 4
	; getelementptr 56
	%_x56 = getelementptr inbounds i32, i32* %_x41, i32 1
	%_x57 = load i32, i32* %_x56, align 4
	; getelementptr 58
	%_x58 = getelementptr inbounds i32, i32* %_x41, i32 2
	%_x59 = load i32, i32* %_x58, align 4
	; getelementptr 60
	%_x60 = getelementptr inbounds i32, i32* %_x41, i32 3
	%_x61 = load i32, i32* %_x60, align 4
	%_t62 = getelementptr inbounds [29 x i8], [29 x i8]* @.str4, i32 0, i32 0
	call void @putstr(i8* %_t62)
	call void @putint(i32 %_x55)
	%_t63 = getelementptr inbounds [2 x i8], [2 x i8]* @.str5, i32 0, i32 0
	call void @putstr(i8* %_t63)
	call void @putint(i32 %_x57)
	%_t64 = getelementptr inbounds [2 x i8], [2 x i8]* @.str6, i32 0, i32 0
	call void @putstr(i8* %_t64)
	call void @putint(i32 %_x59)
	%_t65 = getelementptr inbounds [2 x i8], [2 x i8]* @.str7, i32 0, i32 0
	call void @putstr(i8* %_t65)
	call void @putint(i32 %_x61)
	%_t66 = getelementptr inbounds [3 x i8], [3 x i8]* @.str8, i32 0, i32 0
	call void @putstr(i8* %_t66)
	%_t67 = alloca i32, align 4
	%_x68 = getelementptr inbounds i32, i32* %_t67, i32 0
	%_x69 = call i32 @getint()
	; store 70
	store i32 %_x69, i32* %_x68, align 4
	%_t71 = alloca i32, align 4
	%_x72 = getelementptr inbounds i32, i32* %_t71, i32 0
	%_x73 = call i32 @getint()
	; store 74
	store i32 %_x73, i32* %_x72, align 4
	%_t75 = alloca i32, align 4
	%_x76 = getelementptr inbounds i32, i32* %_t75, i32 0
	%_x77 = call i32 @getint()
	; store 78
	store i32 %_x77, i32* %_x76, align 4
	%_x79 = load i32, i32* %_x68, align 4
	%_x80 = load i32, i32* %_x72, align 4
	%_t81 = icmp slt i32 %_x79, %_x80
	%_x82 = zext i1 %_t81 to i32
	%_x83 = load i32, i32* %_x72, align 4
	%_x84 = load i32, i32* %_x76, align 4
	%_t85 = icmp slt i32 %_x83, %_x84
	%_x86 = zext i1 %_t85 to i32
	%_t87 = icmp eq i32 %_x82, %_x86
	%_x88 = zext i1 %_t87 to i32
	; if %_x88 then _b7 else _b8
	%_t89 = icmp ne i32 %_x88, 0
	br i1 %_t89, label %_b7, label %_b8
_b7: ; preds = %_b6
	%_t90 = getelementptr inbounds [28 x i8], [28 x i8]* @.str9, i32 0, i32 0
	call void @putstr(i8* %_t90)
	br label %_b9
_b8: ; preds = %_b6
	br label %_b9
_b9: ; preds = %_b7, %_b8
	%_t91 = alloca i32, align 4
	%_x92 = getelementptr inbounds i32, i32* %_t91, i32 0
	%_x93 = call i32 @getint()
	; store 94
	store i32 %_x93, i32* %_x92, align 4
	%_x95 = load i32, i32* %_x92, align 4
	%_x96 = mul i32 %_x95, 8
	%_x97 = mul i32 %_x96, 16
	%_x98 = mul i32 %_x97, 256
	; store 99
	store i32 %_x98, i32* %_x92, align 4
	%_x100 = load i32, i32* %_x92, align 4
	%_x101 = sdiv i32 %_x100, 8
	%_x102 = sdiv i32 %_x101, 16
	%_x103 = sdiv i32 %_x102, 256
	%_t104 = getelementptr inbounds [21 x i8], [21 x i8]* @.str10, i32 0, i32 0
	call void @putstr(i8* %_t104)
	call void @putint(i32 %_x103)
	%_t105 = getelementptr inbounds [2 x i8], [2 x i8]* @.str11, i32 0, i32 0
	call void @putstr(i8* %_t105)
	%_x106 = load i32, i32* %_x92, align 4
	%_x107 = mul i32 12, %_x106
	%_x108 = sdiv i32 %_x107, 7
	%_x109 = mul i32 %_x108, 23
	%_x110 = sub i32 %_x109, 2222
	%_x111 = add i32 %_x110, 34
	%_x112 = srem i32 %_x111, 6
	%_x113 = mul i32 %_x112, 999
	%_x114 = sub i32 %_x113, 1222
	%_t115 = alloca i32, align 4
	%_x116 = getelementptr inbounds i32, i32* %_t115, i32 0
	; store 117
	store i32 %_x114, i32* %_x116, align 4
	%_x118 = load i32, i32* %_x116, align 4
	%_t119 = getelementptr inbounds [34 x i8], [34 x i8]* @.str12, i32 0, i32 0
	call void @putstr(i8* %_t119)
	call void @putint(i32 %_x118)
	%_t120 = getelementptr inbounds [2 x i8], [2 x i8]* @.str13, i32 0, i32 0
	call void @putstr(i8* %_t120)
	ret i32 0
}

